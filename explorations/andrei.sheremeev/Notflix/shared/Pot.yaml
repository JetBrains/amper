imports:
  - com.android.build.gradle.internal.cxx.configure.gradleLocalProperties
  - com.codingfeline.buildkonfig.compiler.FieldSpec.Type.STRING
  - org.jetbrains.kotlin.gradle.plugin.mpp.KotlinNativeTarget

product:
  type: library
  platform: [ jvm ] # jvm? or android? this is just a shared library, maybe jvm is enough


plugins@aliases:
  - libs.plugins.multiplatform
  - libs.plugins.nativeCocoapod
  - libs.plugins.android.library
  - libs.plugins.kotlinX.serialization.plugin
  - libs.plugins.kmp.nativeCoroutines.plugin
  - libs.plugins.buildKonfig

# this is already looks for me a bit complicated and I have vibes from Maven Pom's with their `ladders`
settings:
  android:
    compileSdk: 33
    sourceSets:
      main:
        manifest:
          srcFile: "src/androidMain/AndroidManifest.xml"
        defaultConfig:
          minSdk: 21
          targetSdk: compileSdk


  kotlin:
    - android
    - jvm

    # should we leave variable declaration the same as in kotlin? or custom it (???)
    # but this seems to be kinda inconvenient
    - #    val iosTarget: (String, KotlinNativeTarget.() -> Unit) -> KotlinNativeTarget = when {
      #      System.getenv("SDK_NAME")?.startsWith("iphoneos") == true -> ::iosArm64
      #      System.getenv("NATIVE_ARCH")?.startsWith("arm") == true -> ::iosSimulatorArm64
      #      else -> ::iosX64
      #    }
      #      iosTarget("iOS") {}

#    - iosTarget: [ "iOS" ]


      # honestly I really got confused with this iosTarget val and as I consider it should do smth like this:
      # cant get why we even pass a string, even though it shouldn't take any params bs it is a value(?)



    - KotlinNativeTarget: = when {
      System.getenv("SDK_NAME")?.startsWith("iphoneos") == true -> ::iosArm64
      System.getenv("NATIVE_ARCH")?.startsWith("arm") == true -> ::iosSimulatorArm64
      else -> ::iosX64
    }


    - version: "1"
    - cocoapods:
        summary: "Some description for the Shared Module"
        homepage: "Link to the Shared Module homepage"
        podfile: project.file("../iOSNotflix/Podfile")
        framework:
          - baseName: "shared"
          - isStatic: false

    - sourceSets:
        commonMain: # not sure that it is a good idea to write custom string here (our own source, which can be easily changed)
          - dependencies:
              - libs.kotlinX.coroutines
              - libs.ktor.contentNegotiation
              - libs.ktor.json
              - libs.ktor.logging
              - libs.kotlinX.serializationJson
              - libs.multiplatformSettings.noArg
              - libs.multiplatformSettings.coroutines
              - libs.kotlinX.dateTime
          - api:
              - libs.koin.core
              - libs.ktor.core
              - libs.ktor.cio
              - libs.napier

# another way to declare ?

        #        dependencies@"commonMain":
        #          - libs.kotlinX.coroutines
        #          - libs.ktor.contentNegotiation
        #          - libs.ktor.json
        #          - libs.ktor.logging
        #          - libs.kotlinX.serializationJson
        #          - libs.multiplatformSettings.noArg
        #          - libs.multiplatformSettings.coroutines
        #          - libs.kotlinX.dateTime
        #        api@"commonMain":
        #          - libs.koin.core
        #          - libs.ktor.core
        #          - libs.ktor.cio
        #          - libs.napier

        commonTest@dependencies:
          - kotlin("test")
          - libs.turbine
          - libs.ktor.mock
          - libs.mockk
          - libs.kotlinX.testResources
          - libs.kotlinX.coroutines.test
          - libs.multiplatformSettings.test

        # or this string can be deleted completely bc it doesnt mean anything for building (if I'm correct) ?
        dependencies@[androidMain, androidTest, iOSMain, iOSTest, jvmMain, jvmTest]: [ ]


buildconfig:
  - packageName: "com.vickikbt.shared"
  - defaultConfigs@buildConfigField: [
    STRING,
    "API_KEY",
    gradleLocalProperties(rootDir).getProperty("api_key") ?: ""
  ]
