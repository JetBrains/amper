android.version.should.be.at.least.min.sdk=Version for {0} ({1}) should be at least minSdk version ({2})
compose.is.disabled=Compose is disabled and dependency {0} is not available. Set `compose.enabled` to `true` to activate the Compose library catalog.
compose.version.without.compose=Compose version is specified, but Compose is disabled
credentials.file.does.not.exist=Credentials file {0} does not exist.
credentials.file.does.not.have.key=Credentials file {0} does not have the key [{1}]. Available keys are: [{2}]
dependencies.modules.loop=Module dependencies loop detected: `{0}`
dependencies.modules.loop.grouping=Dependencies specified at:
dependencies.modules.self=Module {0} can not depend on itself
empty.version.string=Version string cannot be empty
gradle.specific.unsupported=This setting was only applicable in Gradle-based Amper and is now obsolete: {0}.
inconsistent.compose.versions=Currently, Compose versions should be the same across all module files. Chosen Compose version is {0}.
invalid.kotlin.compiler.version=Invalid Kotlin compiler version {0}. Should be in the format ''x.y.*''.
keystore.properties.does.not.exist=Android signing enabled, but {0} does not exist
keystore.properties.file.does.not.exist=Keystore file {0} does not exist
keystore.properties.key.does.not.exist=Properties file {0} does not contain key "{1}"
keystore.properties.value.required=Property value is mandatory for "{1}" in properties file {0}
kotlin.compiler.version.too.low=Unsupported Kotlin compiler version {0}. Should be at least {1}.
kotlin.serialization.is.disabled=Serialization plugin is disabled and dependency {0} is not available. Set `kotlin.serialization.enabled` to `true` to activate the Kotlin Serialization library catalog.
module.dependency.doesnt.have.needed.platforms=Module {0} does not support compiling to platforms {1}
module.dependency.with.incompatible.jvm.release=Module {0} uses JVM release {1} but depends on module {2} with a higher JVM release {3}
module.dependency.with.incompatible.jvm.release.grouping=Caused by the combination of:
multiple.qualifiers.are.unsupported=Multiple qualifiers are not supported yet
no.catalog.value=No catalog value for the key {0}
plugin.dependency.not.found=Plugin module `{0}` is not found
plugin.dependency.not.included=Plugin module `{0}` is not included in the project `modules` list
plugin.id.duplicate=Plugin id must be unique across the project
plugin.id.duplicate.grouping=There are multiple plugins with the id `{0}`:
plugin.missing.schema.class=Plugin schema class `{0}` is not found
plugin.unexpected.product.type=Unexpected product type for plugin. Expected {0}, got {1}
product.not.defined=Product type definition is missing
product.not.defined.empty=Product type definition is missing. Define a product using a ''product:'' declaration.
product.platforms.should.not.be.empty=Product platforms list should not be empty.
product.type.does.not.have.default.platforms=Product type {0} should have its platforms declared explicitly like that:\
  \nproduct:\
  \n  type: {0}\
  \n  platforms: [jvm, iosArm64]
product.type.does.not.have.default.platforms.amperlang=Product type {0} should have its platforms declared explicitly like that:\
  \nproduct '{'\
  \n  type = "{0}"\
  \n  platforms = '{'"jvm", "iosArm64"'}'\
  \n'}'
product.unknown.qualifier=Unknown qualifier: {0}
product.unsupported.platform=Product type {0} does not support platform: {1}.\
  \nSupported platforms are: [{2}].
project.has.no.modules=Project has no modules: no root module file and no modules listed in the project file
project.module.dir.0.has.no.module.file=Directory "{0}" doesn''t contain an Amper module file
project.module.dir.0.is.not.under.root=Directory "{0}" is not under the project root
project.module.glob.0.double.star.not.supported=Unsupported "**" in module glob pattern "{0}". Use multiple single-level "*" segments instead to specify the depth exactly.
project.module.glob.0.is.invalid.1=Invalid glob pattern "{0}": {1}
project.module.glob.0.matches.nothing=Glob pattern "{0}" doesn''t match any Amper module directory under the project root
project.module.path.0.is.not.a.directory="{0}" is not a directory
project.module.path.0.unresolved=Unresolved module path "{0}"
project.module.root.is.included.by.default=The root module is included by default
published.module.0.depends.on.non.published.module.1=Module "{0}" is configured for publishing but depends on module "{1}" which is not
serialization.version.without.serialization=A custom kotlinx.serialization version is specified, but the serialization plugin is disabled
setting.value.is.same.as.base=Setting value is redundant. It''s identical to the value inherited from {0}
setting.value.is.same.as.common=Setting value is redundant. It''s identical to the value set in common (non-platform-specific) settings
settings.incorrect.platforms=Setting ''{0}'' doesn''t have any effect on {1,choice,1#platform|1<platforms} {2}. It only applies to {3}
settings.incorrect.product.type=Setting ''{0}'' cannot be applied to product type ''{1}''. Supported product types are: {2}
settings.unexpected.platform=Setting ''{0}'' can only be used without any @platform qualifier.
template.name.without.postfix=Template names should have a ''.module-template.yaml'' suffix. Skipping the suffix might result in incorrect functioning of Amper.
too.old.android.version=Android version {0} is too old (should be at least {1})
tracing.overrides=Overrides value {0} from {1}
tracing.overrides.default=Overrides default value {0}
unexpected.bom.dependency.structure=Bom dependency should be declared as `bom: groupId:artifactId:version` without additional attributes.
unexpected.bom.local=Local bom dependencies are not supported
unexpected.poly.type=Unexpected type: {0}
unexpected.product.node.type=Unexpected product node type: {0}
unexpected.yaml.node.type=Unexpected YAML node type: {0}. Property type is: {1}
unknown.property=Unknown property {0}
unknown.property.did.you.mean=Unknown property ''{0}''. Did you mean {1}?
unresolved.module=Cannot find a module file ''{0}''
unresolved.module.with.hint=Cannot find a module file ''{0}''. Did you mean ''{1}''?
unresolved.template=Cannot find a template file ''{0}''
validation.alias.intersects.with.natural.hierarchy=Alias {0} is the same as natural hierarchy platform {1}. Please use it instead.
validation.alias.use.undeclared.platform=Alias uses a platform {0}, that is undeclared in the current product.
validation.expected.boolean=Expected a boolean value
validation.expected.integer=Expected an integer value
validation.expected.path=Expected a path
validation.missing.value=No value for required property ''{0}''.
validation.missing.value.free=Missing required value
validation.not.within.known.values=Unknown: {0}. Expected one of: [{1}]
validation.reference.missing.closing.brace=Missing closing brace `}` for the reference.
validation.structure.missing.key=Expected a mapping key
validation.structure.missing.list.item=List item is missing
validation.structure.unsupported.multiple.documents=Multiple YAML documents are not supported here
validation.structure.unsupported.standard.alias=Standard YAML anchors/aliases are not supported in Amper
validation.structure.unsupported.standard.tag=Standard (!!) YAML type tags are not supported in Amper
validation.structure.unsupported.tag=Unexpected YAML type tag
validation.types.expected.key.value=Expected a key-value pair, but got `{0}`
validation.types.expected.key.value.single=Expected a single key-value pair
validation.types.expected.object=Expected a mapping `{0}`, but got `{1}`
validation.types.invalid.ctor.arg=Expected {0}, so either a single {1} value or a mapping with a single key of type {1} are expected
validation.types.invalid.ctor.arg.key=Expected {0}, but a single mapping entry with a key of type {0} is expected
validation.types.invalid.ctor.arg.value=Expected {0}, but mapping is missing its value
validation.types.invalid.path=Invalid path: ''{0}''
validation.types.missing.tag=Explicit type specifier is required for this value: [{0}]
validation.types.reserved.null=`null` value is reserved for the future use. Use quotes to treat it like a regular literal
validation.types.unexpected.compound.key=Unexpected compound key. Only string keys are supported
validation.types.unexpected.null=`null` value is unexpected here
validation.types.unexpected.null.stringlike=`null` value is unexpected here. Use quotes to treat it like a regular literal
validation.types.unexpected.value=Expected `{0}`, but got `{1}`
validation.types.unknown.enum.value=Unknown value ''{0}''. Expected one of: [{1}]
validation.types.unknown.tag=Unexpected type specified. Expected one of: [{0}]
validation.types.unsupported.interpolation=Value of type {0} doesn't support string interpolation
validation.types.unsupported.reference=References are not yet supported in this context
validation.unexpected.property=Unexpected property ''{0}''