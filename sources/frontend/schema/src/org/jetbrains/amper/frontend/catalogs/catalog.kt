/*
 * Copyright 2000-2025 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.
 */

package org.jetbrains.amper.frontend.catalogs

import org.apache.maven.artifact.versioning.ComparableVersion
import org.jetbrains.amper.core.UsedVersions
import org.jetbrains.amper.core.UsedVersions.logbackVersion
import org.jetbrains.amper.core.system.DefaultSystemInfo
import org.jetbrains.amper.core.system.SystemInfo
import org.jetbrains.amper.frontend.VersionCatalog
import org.jetbrains.amper.frontend.api.BuiltinCatalogTrace
import org.jetbrains.amper.frontend.api.DefaultTrace
import org.jetbrains.amper.frontend.api.TraceableString
import org.jetbrains.amper.frontend.api.TraceableVersion
import org.jetbrains.amper.frontend.api.valueBase
import org.jetbrains.amper.frontend.asBuildProblemSource
import org.jetbrains.amper.frontend.reportBundleError
import org.jetbrains.amper.frontend.schema.Settings
import org.jetbrains.amper.problems.reporting.NonIdealDiagnostic
import org.jetbrains.amper.problems.reporting.ProblemReporter

internal operator fun VersionCatalog?.plus(other: VersionCatalog) =
    if (this == null) other else CompositeVersionCatalog(listOf(this, other))

context(problemReporter: ProblemReporter)
internal fun Settings.builtInCatalog(): VersionCatalog = BuiltInCatalog(
    serializationVersion = kotlin.serialization.takeIf { it.enabled }?.version
        ?.let { TraceableVersion(it, kotlin.serialization::version.valueBase) }
        ?.let { version(it, UsedVersions.kotlinxSerializationVersion) },
    composeVersion = compose.takeIf { it.enabled }?.version
        ?.let { TraceableVersion(it, compose::version.valueBase) }
        ?.let { version(it, UsedVersions.composeVersion) },
    ktorVersion = ktor.takeIf { it.enabled }?.version
        ?.let { TraceableVersion(it, ktor::version.valueBase) }
        ?.let { version(it, UsedVersions.ktorVersion) },
    springBootVersion = springBoot.takeIf { it.enabled }?.version
        ?.let { TraceableVersion(it, springBoot::version.valueBase) }
        ?.let { version(it, UsedVersions.springBootVersion) },
)

context(problemReporter: ProblemReporter)
@OptIn(NonIdealDiagnostic::class)
private fun version(version: TraceableVersion, fallbackVersion: String): TraceableString {
    // we validate the version only for emptiness because maven artifacts allow any string as a version
    //  that's why we cannot provide a precise validation for non-empty strings
    return if (!version.value.isEmpty()) version
    else {
        problemReporter.reportBundleError(
            source = version.asBuildProblemSource(),
            messageKey = "empty.version.string",
        )
        // fallback to avoid double errors
        TraceableString(fallbackVersion, trace = DefaultTrace)
    }
}

/**
 * Composition of multiple version catalogs with priority for first declared.
 */
private class CompositeVersionCatalog(
    private val catalogs: List<VersionCatalog>,
) : VersionCatalog {

    override val entries: Map<String, TraceableString> = buildMap {
        // First catalogs have the highest priority.
        catalogs.reversed().forEach { putAll(it.entries) }
    }

    override val isPhysical: Boolean
        get() = catalogs.any { it.isPhysical }

    override fun findInCatalog(key: String) = catalogs.firstNotNullOfOrNull { it.findInCatalog(key) }
}

private class BuiltInCatalog(
    serializationVersion: TraceableString?,
    composeVersion: TraceableString?,
    ktorVersion: TraceableString?,
    springBootVersion: TraceableString?,
    private val systemInfo: SystemInfo = DefaultSystemInfo,
) : VersionCatalog {
    override val isPhysical: Boolean = false
    override fun findInCatalog(key: String): TraceableString? = entries[key]

    override val entries: Map<String, TraceableString> = buildMap {
        // @formatter:off
        // Add Kotlin dependencies that should be aligned with our single Kotlin version
        val kotlinVersion = UsedVersions.kotlinVersion
        put("kotlin.test", library("org.jetbrains.kotlin:kotlin-test", kotlinVersion))
        put("kotlin.test.junit", library("org.jetbrains.kotlin:kotlin-test-junit", kotlinVersion))
        put("kotlin.test.junit5", library("org.jetbrains.kotlin:kotlin-test-junit5", kotlinVersion))
        put("kotlin.reflect", library("org.jetbrains.kotlin:kotlin-reflect", kotlinVersion))

        if (serializationVersion != null) {
            put("kotlin.serialization.core", library("org.jetbrains.kotlinx:kotlinx-serialization-core", serializationVersion))
            put("kotlin.serialization.cbor", library("org.jetbrains.kotlinx:kotlinx-serialization-cbor", serializationVersion))
            put("kotlin.serialization.hocon", library("org.jetbrains.kotlinx:kotlinx-serialization-hocon", serializationVersion))
            put("kotlin.serialization.json", library("org.jetbrains.kotlinx:kotlinx-serialization-json", serializationVersion))
            put("kotlin.serialization.json-okio", library("org.jetbrains.kotlinx:kotlinx-serialization-json-okio", serializationVersion))
            put("kotlin.serialization.properties", library("org.jetbrains.kotlinx:kotlinx-serialization-properties", serializationVersion))
            put("kotlin.serialization.protobuf", library("org.jetbrains.kotlinx:kotlinx-serialization-protobuf", serializationVersion))
        }

        // Add compose.
        if (composeVersion != null) {
            put("compose.animation", library("org.jetbrains.compose.animation:animation", composeVersion))
            put("compose.animationGraphics", library("org.jetbrains.compose.animation:animation-graphics", composeVersion))
            put("compose.components.resources", library("org.jetbrains.compose.components:components-resources", composeVersion))
            put("compose.desktop.common", library("org.jetbrains.compose.desktop:desktop", composeVersion))
            put("compose.desktop.components.animatedImage", library("org.jetbrains.compose.components:components-animatedimage", composeVersion))
            put("compose.desktop.components.splitPane", library("org.jetbrains.compose.components:components-splitpane", composeVersion))
            put("compose.desktop.currentOs", library("org.jetbrains.compose.desktop:desktop-jvm-${systemInfo.detect().familyArch}", composeVersion))
            put("compose.desktop.linux_arm64", library("org.jetbrains.compose.desktop:desktop-jvm-linux-arm64", composeVersion))
            put("compose.desktop.linux_x64", library("org.jetbrains.compose.desktop:desktop-jvm-linux-x64", composeVersion))
            put("compose.desktop.macos_arm64", library("org.jetbrains.compose.desktop:desktop-jvm-macos-arm64", composeVersion))
            put("compose.desktop.macos_x64", library("org.jetbrains.compose.desktop:desktop-jvm-macos-x64", composeVersion))
            put("compose.desktop.uiTestJUnit4", library("org.jetbrains.compose.ui:ui-test-junit4", composeVersion))
            put("compose.desktop.windows_x64", library("org.jetbrains.compose.desktop:desktop-jvm-windows-x64", composeVersion))
            put("compose.foundation", library("org.jetbrains.compose.foundation:foundation", composeVersion))
            put("compose.html.core", library("org.jetbrains.compose.html:html-core", composeVersion))
            put("compose.html.svg", library("org.jetbrains.compose.html:html-svg", composeVersion))
            put("compose.html.testUtils", library("org.jetbrains.compose.html:html-test-utils", composeVersion))
            put("compose.material", library("org.jetbrains.compose.material:material", composeVersion))
            put("compose.material3", library("org.jetbrains.compose.material3:material3", composeVersion))
            put("compose.materialIconsCore", library("org.jetbrains.compose.material:material-icons-core", materialIconsVersion(composeVersion)))
            put("compose.materialIconsExtended", library("org.jetbrains.compose.material:material-icons-extended", materialIconsVersion(composeVersion)))
            put("compose.preview", library("org.jetbrains.compose.ui:ui-tooling-preview", composeVersion))
            put("compose.preview", library("org.jetbrains.compose.ui:ui-tooling-preview", composeVersion))
            put("compose.runtime", library("org.jetbrains.compose.runtime:runtime", composeVersion))
            put("compose.runtimeSaveable", library("org.jetbrains.compose.runtime:runtime-saveable", composeVersion))
            put("compose.ui", library("org.jetbrains.compose.ui:ui", composeVersion))
            put("compose.uiTest", library("org.jetbrains.compose.ui:ui-test", composeVersion))
            put("compose.uiTooling", library("org.jetbrains.compose.ui:ui-tooling", composeVersion))

        }

        // add ktor
        if (ktorVersion != null) {
            // bom
            put("ktor.bom", library("io.ktor:ktor-bom", ktorVersion))

            // server
            put("ktor.auth", library("io.ktor:ktor-auth"))
            put("ktor.auth.jwt", library("io.ktor:ktor-auth-jwt"))
            put("ktor.auth.ldap", library("io.ktor:ktor-auth-ldap"))
            put("ktor.freemarker", library("io.ktor:ktor-freemarker"))
            put("ktor.html.builder", library("io.ktor:ktor-html-builder"))
            put("ktor.http", library("io.ktor:ktor-http"))
            put("ktor.http.cio", library("io.ktor:ktor-http-cio"))
            put("ktor.locations", library("io.ktor:ktor-locations"))
            put("ktor.mustache", library("io.ktor:ktor-mustache"))
            put("ktor.pebble", library("io.ktor:ktor-pebble"))
            put("ktor.server.auth", library("io.ktor:ktor-server-auth"))
            put("ktor.server.auth.jwt", library("io.ktor:ktor-server-auth-jwt"))
            put("ktor.server.auth.ldap", library("io.ktor:ktor-server-auth-ldap"))
            put("ktor.server.autoHeadResponse", library("io.ktor:ktor-server-auto-head-response"))
            put("ktor.server.bodyLimit", library("io.ktor:ktor-server-body-limit"))
            put("ktor.server.cachingHeaders", library("io.ktor:ktor-server-caching-headers"))
            put("ktor.server.callId", library("io.ktor:ktor-server-call-id"))
            put("ktor.server.callLogging", library("io.ktor:ktor-server-call-logging"))
            put("ktor.server.cio", library("io.ktor:ktor-server-cio"))
            put("ktor.server.compression", library("io.ktor:ktor-server-compression"))
            put("ktor.server.conditionalHeaders", library("io.ktor:ktor-server-conditional-headers"))
            put("ktor.server.configYaml", library("io.ktor:ktor-server-config-yaml"))
            put("ktor.server.contentNegotiation", library("io.ktor:ktor-server-content-negotiation"))
            put("ktor.server.core", library("io.ktor:ktor-server-core"))
            put("ktor.server.cors", library("io.ktor:ktor-server-cors"))
            put("ktor.server.csrf", library("io.ktor:ktor-server-csrf"))
            put("ktor.server.dataConversion", library("io.ktor:ktor-server-data-conversion"))
            put("ktor.server.defaultHeaders", library("io.ktor:ktor-server-default-headers"))
            put("ktor.server.doubleReceive", library("io.ktor:ktor-server-double-receive"))
            put("ktor.server.forwardedHeader", library("io.ktor:ktor-server-forwarded-header"))
            put("ktor.server.freemarker", library("io.ktor:ktor-server-freemarker"))
            put("ktor.server.hsts", library("io.ktor:ktor-server-hsts"))
            put("ktor.server.htmlBuilder", library("io.ktor:ktor-server-html-builder"))
            put("ktor.server.httpRedirect", library("io.ktor:ktor-server-http-redirect"))
            put("ktor.server.i18n", library("io.ktor:ktor-server-i18n"))
            put("ktor.server.jetty", library("io.ktor:ktor-server-jetty"))
            put("ktor.server.jetty.jakarta", library("io.ktor:ktor-server-jetty-jakarta"))
            put("ktor.server.jte", library("io.ktor:ktor-server-jte"))
            put("ktor.server.locations", library("io.ktor:ktor-server-locations"))
            put("ktor.server.methodOverride", library("io.ktor:ktor-server-method-override"))
            put("ktor.server.metrics", library("io.ktor:ktor-server-metrics"))
            put("ktor.server.metrics.micrometer", library("io.ktor:ktor-server-metrics-micrometer"))
            put("ktor.server.mustache", library("io.ktor:ktor-server-mustache"))
            put("ktor.server.netty", library("io.ktor:ktor-server-netty"))
            put("ktor.server.openapi", library("io.ktor:ktor-server-openapi"))
            put("ktor.server.partialContent", library("io.ktor:ktor-server-partial-content"))
            put("ktor.server.pebble", library("io.ktor:ktor-server-pebble"))
            put("ktor.server.plugins", library("io.ktor:ktor-server-plugins"))
            put("ktor.server.rateLimit", library("io.ktor:ktor-server-rate-limit"))
            put("ktor.server.requestValidation", library("io.ktor:ktor-server-request-validation"))
            put("ktor.server.resources", library("io.ktor:ktor-server-resources"))
            put("ktor.server.servlet", library("io.ktor:ktor-server-servlet"))
            put("ktor.server.servlet.jakarta", library("io.ktor:ktor-server-servlet-jakarta"))
            put("ktor.server.sessions", library("io.ktor:ktor-server-sessions"))
            put("ktor.server.sse", library("io.ktor:ktor-server-sse"))
            put("ktor.server.statusPages", library("io.ktor:ktor-server-status-pages"))
            put("ktor.server.swagger", library("io.ktor:ktor-server-swagger"))
            put("ktor.server.testHost", library("io.ktor:ktor-server-test-host"))
            put("ktor.server.thymeleaf", library("io.ktor:ktor-server-thymeleaf"))
            put("ktor.server.tomcat", library("io.ktor:ktor-server-tomcat"))
            put("ktor.server.tomcat.jakarta", library("io.ktor:ktor-server-tomcat-jakarta"))
            put("ktor.server.velocity", library("io.ktor:ktor-server-velocity"))
            put("ktor.server.webjars", library("io.ktor:ktor-server-webjars"))
            put("ktor.server.websockets", library("io.ktor:ktor-server-websockets"))
            put("ktor.thymeleaf", library("io.ktor:ktor-thymeleaf"))
            put("ktor.velocity", library("io.ktor:ktor-velocity"))
            put("ktor.webjars", library("io.ktor:ktor-webjars"))
            put("ktor.websockets", library("io.ktor:ktor-websockets"))

            // client
            put("ktor.client", library("io.ktor:ktor-client"))
            put("ktor.client.apache", library("io.ktor:ktor-client-apache"))
            put("ktor.client.apache5", library("io.ktor:ktor-client-apache5"))
            put("ktor.client.auth", library("io.ktor:ktor-client-auth"))
            put("ktor.client.authBasic", library("io.ktor:ktor-client-auth-basic"))
            put("ktor.client.callId", library("io.ktor:ktor-client-call-id"))
            put("ktor.client.cio", library("io.ktor:ktor-client-cio"))
            put("ktor.client.contentNegotiation", library("io.ktor:ktor-client-content-negotiation"))
            put("ktor.client.core", library("io.ktor:ktor-client-core"))
            put("ktor.client.encoding", library("io.ktor:ktor-client-encoding"))
            put("ktor.client.features", library("io.ktor:ktor-client-features"))
            put("ktor.client.gson", library("io.ktor:ktor-client-gson"))
            put("ktor.client.jackson", library("io.ktor:ktor-client-jackson"))
            put("ktor.client.java", library("io.ktor:ktor-client-java"))
            put("ktor.client.jetty", library("io.ktor:ktor-client-jetty"))
            put("ktor.client.jetty.jakarta", library("io.ktor:ktor-client-jetty-jakarta"))
            put("ktor.client.json", library("io.ktor:ktor-client-json"))
            put("ktor.client.logging", library("io.ktor:ktor-client-logging"))
            put("ktor.client.mock", library("io.ktor:ktor-client-mock"))
            put("ktor.client.okhttp", library("io.ktor:ktor-client-okhttp"))
            put("ktor.client.plugins", library("io.ktor:ktor-client-plugins"))
            put("ktor.client.resources", library("io.ktor:ktor-client-resources"))
            put("ktor.client.serialization", library("io.ktor:ktor-client-serialization"))
            put("ktor.client.websocket", library("io.ktor:ktor-client-websocket"))
            put("ktor.client.websockets", library("io.ktor:ktor-client-websockets"))
            put("ktor.client.winhttp", library("io.ktor:ktor-client-winhttp"))

            // other
            put("ktor.callId", library("io.ktor:ktor-call-id"))
            put("ktor.events", library("io.ktor:ktor-events"))
            put("ktor.features", library("io.ktor:ktor-features"))
            put("ktor.gson", library("io.ktor:ktor-gson"))
            put("ktor.io", library("io.ktor:ktor-io"))
            put("ktor.jackson", library("io.ktor:ktor-jackson"))
            put("ktor.metrics", library("io.ktor:ktor-metrics"))
            put("ktor.metrics.micrometer", library("io.ktor:ktor-metrics-micrometer"))
            put("ktor.network", library("io.ktor:ktor-network"))
            put("ktor.network.tls", library("io.ktor:ktor-network-tls"))
            put("ktor.network.tls.certificates", library("io.ktor:ktor-network-tls-certificates"))
            put("ktor.resources", library("io.ktor:ktor-resources"))
            put("ktor.serialization", library("io.ktor:ktor-serialization"))
            put("ktor.serialization.gson", library("io.ktor:ktor-serialization-gson"))
            put("ktor.serialization.jackson", library("io.ktor:ktor-serialization-jackson"))
            put("ktor.serialization.kotlinx", library("io.ktor:ktor-serialization-kotlinx"))
            put("ktor.serialization.kotlinx.cbor", library("io.ktor:ktor-serialization-kotlinx-cbor"))
            put("ktor.serialization.kotlinx.json", library("io.ktor:ktor-serialization-kotlinx-json"))
            put("ktor.serialization.kotlinx.protobuf", library("io.ktor:ktor-serialization-kotlinx-protobuf"))
            put("ktor.serialization.kotlinx.xml", library("io.ktor:ktor-serialization-kotlinx-xml"))
            put("ktor.sse", library("io.ktor:ktor-sse"))
            put("ktor.utils", library("io.ktor:ktor-utils"))
            put("ktor.websocket.serialization", library("io.ktor:ktor-websocket-serialization"))

            put("logback.classic", library("ch.qos.logback:logback-classic", logbackVersion))
        }

        // Spring Boot dependencies
        if (springBootVersion != null) {
            put("spring.cloud.azure.bom", library("com.azure.spring:spring-cloud-azure-dependencies", "5.23.0"))
            put("codecentric.spring.boot.admin.bom", library("de.codecentric:spring-boot-admin-dependencies", "3.5.0"))
            put("spring.cloud.bom", library("org.springframework.cloud:spring-cloud-dependencies", "2025.0.0"))
            put("netflix.dgs.bom", library("com.netflix.graphql.dgs:graphql-dgs-platform-dependencies", "10.2.1"))
            put("spring.shell.bom", library("org.springframework.shell:spring-shell-dependencies", "3.4.1"))
            put("timefold.solver.bom", library("ai.timefold.solver:timefold-solver-bom", "1.25.0"))
            put("spring.modulith.bom", library("org.springframework.modulith:spring-modulith-bom", "1.4.1"))
            put("spring.cloud.services.bom", library("io.pivotal.spring.cloud:spring-cloud-services-dependencies", "4.3.0"))
            put("spring.cloud.gcp.bom", library("com.google.cloud:spring-cloud-gcp-dependencies", "7.1.0"))
            put("vaadin.bom", library("com.vaadin:vaadin-bom", "24.8.6"))
            put("spring.ai.bom", library("org.springframework.ai:spring-ai-bom", "1.0.1"))
            put("sentry.bom", library("io.sentry:sentry-bom", "8.16.0"))
            put("activemq.console", library("org.apache.activemq:activemq-console", "6.1.5"))
            put("activemq.spring", library("org.apache.activemq:activemq-spring", "6.1.5"))
            put("angus.core", library("org.eclipse.angus:angus-core", "2.0.3"))
            put("angus.mail", library("org.eclipse.angus:angus-mail", "2.0.3"))
            put("angus.dsn", library("org.eclipse.angus:dsn", "2.0.3"))
            put("angus.gimap", library("org.eclipse.angus:gimap", "2.0.3"))
            put("angus.imap", library("org.eclipse.angus:imap", "2.0.3"))
            put("angus.jakarta.mail", library("org.eclipse.angus:jakarta.mail", "2.0.3"))
            put("angus.logging.mailhandler", library("org.eclipse.angus:logging-mailhandler", "2.0.3"))
            put("angus.pop3", library("org.eclipse.angus:pop3", "2.0.3"))
            put("angus.smtp", library("org.eclipse.angus:smtp", "2.0.3"))
            put("aspectjrt", library("org.aspectj:aspectjrt", "1.9.22.1"))
            put("aspectjtools", library("org.aspectj:aspectjtools", "1.9.22.1"))
            put("aspectjweaver", library("org.aspectj:aspectjweaver", "1.9.22.1"))
            put("awaitility", library("org.awaitility:awaitility", "4.2.2"))
            put("awaitility.groovy", library("org.awaitility:awaitility-groovy", "4.2.2"))
            put("awaitility.kotlin", library("org.awaitility:awaitility-kotlin", "4.2.2"))
            put("awaitility.scala", library("org.awaitility:awaitility-scala", "4.2.2"))
            put("byte.buddy", library("net.bytebuddy:byte-buddy", "1.15.11"))
            put("byte.buddy.agent", library("net.bytebuddy:byte-buddy-agent", "1.15.11"))
            put("cache2k.api", library("org.cache2k:cache2k-api", "2.6.1.Final"))
            put("cache2k.config", library("org.cache2k:cache2k-config", "2.6.1.Final"))
            put("cache2k.core", library("org.cache2k:cache2k-core", "2.6.1.Final"))
            put("cache2k.jcache", library("org.cache2k:cache2k-jcache", "2.6.1.Final"))
            put("cache2k.micrometer", library("org.cache2k:cache2k-micrometer", "2.6.1.Final"))
            put("cache2k.spring", library("org.cache2k:cache2k-spring", "2.6.1.Final"))
            put("caffeine", library("com.github.ben-manes.caffeine:caffeine", "3.1.8"))
            put("caffeine.guava", library("com.github.ben-manes.caffeine:guava", "3.1.8"))
            put("caffeine.jcache", library("com.github.ben-manes.caffeine:jcache", "3.1.8"))
            put("caffeine.simulator", library("com.github.ben-manes.caffeine:simulator", "3.1.8"))
            put("cassandra.java-driver-core", library("org.apache.cassandra:java-driver-core", "4.18.1"))
            put("fasterxml.classmate", library("com.fasterxml:classmate", "1.7.0"))
            put("commons.codec", library("commons-codec:commons-codec", "1.17.2"))
            put("commons.dbcp2", library("org.apache.commons:commons-dbcp2", "2.12.0"))
            put("commons.lang3", library("org.apache.commons:commons-lang3", "3.17.0"))
            put("commons.pool", library("commons-pool:commons-pool", "1.6"))
            put("commons.pool2", library("org.apache.commons:commons-pool2", "2.12.1"))
            put("couchbase.java.client", library("com.couchbase.client:java-client", "3.7.8"))
            put("crac", library("org.crac:crac", "1.5.0"))
            put("db2.jcc", library("com.ibm.db2:jcc", "11.5.9.0"))
            put("derby", library("org.apache.derby:derby", "10.16.1.1"))
            put("derbyclient", library("org.apache.derby:derbyclient", "10.16.1.1"))
            put("derbynet", library("org.apache.derby:derbynet", "10.16.1.1"))
            put("derbyoptionaltools", library("org.apache.derby:derbyoptionaltools", "10.16.1.1"))
            put("derbyshared", library("org.apache.derby:derbyshared", "10.16.1.1"))
            put("derbytools", library("org.apache.derby:derbytools", "10.16.1.1"))
            put("ehcache", library("org.ehcache:ehcache", "3.10.8"))
            put("ehcache.clustered", library("org.ehcache:ehcache-clustered", "3.10.8"))
            put("ehcache.transactions", library("org.ehcache:ehcache-transactions", "3.10.8"))
            put("elasticsearch.rest.client", library("org.elasticsearch.client:elasticsearch-rest-client", "8.15.5"))
            put("elasticsearch.rest.client.sniffer", library("org.elasticsearch.client:elasticsearch-rest-client-sniffer", "8.15.5"))
            put("elasticsearch.java", library("co.elastic.clients:elasticsearch-java", "8.15.5"))
            put("flyway.commandline", library("org.flywaydb:flyway-commandline", "10.20.1"))
            put("flyway.core", library("org.flywaydb:flyway-core", "10.20.1"))
            put("flyway.database.cassandra", library("org.flywaydb:flyway-database-cassandra", "10.20.1"))
            put("flyway.database.db2", library("org.flywaydb:flyway-database-db2", "10.20.1"))
            put("flyway.database.derby", library("org.flywaydb:flyway-database-derby", "10.20.1"))
            put("flyway.database.hsqldb", library("org.flywaydb:flyway-database-hsqldb", "10.20.1"))
            put("flyway.database.informix", library("org.flywaydb:flyway-database-informix", "10.20.1"))
            put("flyway.database.mongodb", library("org.flywaydb:flyway-database-mongodb", "10.20.1"))
            put("flyway.database.oracle", library("org.flywaydb:flyway-database-oracle", "10.20.1"))
            put("flyway.database.postgresql", library("org.flywaydb:flyway-database-postgresql", "10.20.1"))
            put("flyway.database.redshift", library("org.flywaydb:flyway-database-redshift", "10.20.1"))
            put("flyway.database.saphana", library("org.flywaydb:flyway-database-saphana", "10.20.1"))
            put("flyway.database.snowflake", library("org.flywaydb:flyway-database-snowflake", "10.20.1"))
            put("flyway.database.sybasease", library("org.flywaydb:flyway-database-sybasease", "10.20.1"))
            put("flyway.firebird", library("org.flywaydb:flyway-firebird", "10.20.1"))
            put("flyway.gcp.bigquery", library("org.flywaydb:flyway-gcp-bigquery", "10.20.1"))
            put("flyway.gcp.spanner", library("org.flywaydb:flyway-gcp-spanner", "10.20.1"))
            put("flyway.mysql", library("org.flywaydb:flyway-mysql", "10.20.1"))
            put("flyway.singlestore", library("org.flywaydb:flyway-singlestore", "10.20.1"))
            put("flyway.sqlserver", library("org.flywaydb:flyway-sqlserver", "10.20.1"))
            put("freemarker", library("org.freemarker:freemarker", "2.3.34"))
            put("jakarta.servlet.jsp.jstl", library("org.glassfish.web:jakarta.servlet.jsp.jstl", "3.0.1"))
            put("graphql.java", library("com.graphql-java:graphql-java", "22.3"))
            put("gson", library("com.google.code.gson:gson", "2.11.0"))
            put("h2", library("com.h2database:h2", "2.3.232"))
            put("hamcrest", library("org.hamcrest:hamcrest", "2.2"))
            put("hamcrest.core", library("org.hamcrest:hamcrest-core", "2.2"))
            put("hamcrest.library", library("org.hamcrest:hamcrest-library", "2.2"))
            put("hazelcast", library("com.hazelcast:hazelcast", "5.5.0"))
            put("hazelcast.spring", library("com.hazelcast:hazelcast-spring", "5.5.0"))
            put("hibernate.agroal", library("org.hibernate.orm:hibernate-agroal", "6.6.8.Final"))
            put("hibernate.ant", library("org.hibernate.orm:hibernate-ant", "6.6.8.Final"))
            put("hibernate.c3p0", library("org.hibernate.orm:hibernate-c3p0", "6.6.8.Final"))
            put("hibernate.community.dialects", library("org.hibernate.orm:hibernate-community-dialects", "6.6.8.Final"))
            put("hibernate.core", library("org.hibernate.orm:hibernate-core", "6.6.8.Final"))
            put("hibernate.envers", library("org.hibernate.orm:hibernate-envers", "6.6.8.Final"))
            put("hibernate.graalvm", library("org.hibernate.orm:hibernate-graalvm", "6.6.8.Final"))
            put("hibernate.hikaricp", library("org.hibernate.orm:hibernate-hikaricp", "6.6.8.Final"))
            put("hibernate.jcache", library("org.hibernate.orm:hibernate-jcache", "6.6.8.Final"))
            put("hibernate.jpamodelgen", library("org.hibernate.orm:hibernate-jpamodelgen", "6.6.8.Final"))
            put("hibernate.micrometer", library("org.hibernate.orm:hibernate-micrometer", "6.6.8.Final"))
            put("hibernate.proxool", library("org.hibernate.orm:hibernate-proxool", "6.6.8.Final"))
            put("hibernate.spatial", library("org.hibernate.orm:hibernate-spatial", "6.6.8.Final"))
            put("hibernate.testing", library("org.hibernate.orm:hibernate-testing", "6.6.8.Final"))
            put("hibernate.vibur", library("org.hibernate.orm:hibernate-vibur", "6.6.8.Final"))
            put("hibernate.validator", library("org.hibernate.validator:hibernate-validator", "8.0.2.Final"))
            put("hibernate.validator.annotation.processor", library("org.hibernate.validator:hibernate-validator-annotation-processor", "8.0.2.Final"))
            put("hikaricp", library("com.zaxxer:HikariCP", "5.1.0"))
            put("hsqldb", library("org.hsqldb:hsqldb", "2.7.3"))
            put("htmlunit", library("org.htmlunit:htmlunit", "4.5.0"))
            put("apache.httpasyncclient", library("org.apache.httpcomponents:httpasyncclient", "4.1.5"))
            put("apache.httpclient5", library("org.apache.httpcomponents.client5:httpclient5", "5.4.2"))
            put("apache.httpclient5.cache", library("org.apache.httpcomponents.client5:httpclient5-cache", "5.4.2"))
            put("apache.httpclient5.fluent", library("org.apache.httpcomponents.client5:httpclient5-fluent", "5.4.2"))
            put("apache.httpcore", library("org.apache.httpcomponents:httpcore", "4.4.16"))
            put("apache.httpcore.nio", library("org.apache.httpcomponents:httpcore-nio", "4.4.16"))
            put("apache.httpcore5", library("org.apache.httpcomponents.core5:httpcore5", "5.3.3"))
            put("apache.httpcore5.h2", library("org.apache.httpcomponents.core5:httpcore5-h2", "5.3.3"))
            put("apache.httpcore5.reactive", library("org.apache.httpcomponents.core5:httpcore5-reactive", "5.3.3"))
            put("influxdb.java", library("org.influxdb:influxdb-java", "2.24"))
            put("jakarta.activation.api", library("jakarta.activation:jakarta.activation-api", "2.1.3"))
            put("jakarta.annotation.api", library("jakarta.annotation:jakarta.annotation-api", "2.1.1"))
            put("jakarta.inject.api", library("jakarta.inject:jakarta.inject-api", "2.0.1"))
            put("jakarta.jms.api", library("jakarta.jms:jakarta.jms-api", "3.1.0"))
            put("jakarta.json.api", library("jakarta.json:jakarta.json-api", "2.1.3"))
            put("jakarta.json.bind.api", library("jakarta.json.bind:jakarta.json.bind-api", "3.0.1"))
            put("jakarta.mail.api", library("jakarta.mail:jakarta.mail-api", "2.1.3"))
            put("jakarta.management.j2ee.api", library("jakarta.management.j2ee:jakarta.management.j2ee-api", "1.1.4"))
            put("jakarta.persistence.api", library("jakarta.persistence:jakarta.persistence-api", "3.1.0"))
            put("jakarta.servlet.api", library("jakarta.servlet:jakarta.servlet-api", "6.0.0"))
            put("jakarta.servlet.jsp.jstl.api", library("jakarta.servlet.jsp.jstl:jakarta.servlet.jsp.jstl-api", "3.0.2"))
            put("jakarta.transaction.api", library("jakarta.transaction:jakarta.transaction-api", "2.0.1"))
            put("jakarta.validation.api", library("jakarta.validation:jakarta.validation-api", "3.0.2"))
            put("jakarta.websocket.api", library("jakarta.websocket:jakarta.websocket-api", "2.1.1"))
            put("jakarta.websocket.client.api", library("jakarta.websocket:jakarta.websocket-client-api", "2.1.1"))
            put("jakarta.ws.rs.api", library("jakarta.ws.rs:jakarta.ws.rs-api", "3.1.0"))
            put("jakarta.xml.bind.api", library("jakarta.xml.bind:jakarta.xml.bind-api", "4.0.2"))
            put("jakarta.xml.soap.api", library("jakarta.xml.soap:jakarta.xml.soap-api", "3.0.2"))
            put("jakarta.xml.ws.api", library("jakarta.xml.ws:jakarta.xml.ws-api", "4.0.2"))
            put("janino.commons.compiler", library("org.codehaus.janino:commons-compiler", "3.1.12"))
            put("janino.commons.compiler.jdk", library("org.codehaus.janino:commons-compiler-jdk", "3.1.12"))
            put("janino", library("org.codehaus.janino:janino", "3.1.12"))
            put("javax.cache.api", library("javax.cache:cache-api", "1.1.1"))
            put("javax.money.api", library("javax.money:money-api", "1.1"))
            put("jaxen", library("jaxen:jaxen", "2.0.0"))
            put("firebirdsql.jdbc.jaybird", library("org.firebirdsql.jdbc:jaybird", "5.0.6.java11"))
            put("jboss.logging", library("org.jboss.logging:jboss-logging", "3.6.1.Final"))
            put("jdom2", library("org.jdom:jdom2", "2.0.6.1"))
            put("jedis", library("redis.clients:jedis", "5.2.0"))
            put("jetty.reactive.httpclient", library("org.eclipse.jetty:jetty-reactive-httpclient", "4.0.8"))
            put("jmustache", library("com.samskivert:jmustache", "1.16"))
            put("jooq", library("org.jooq:jooq", "3.19.19"))
            put("jooq.codegen", library("org.jooq:jooq-codegen", "3.19.19"))
            put("jooq.kotlin", library("org.jooq:jooq-kotlin", "3.19.19"))
            put("jooq.meta", library("org.jooq:jooq-meta", "3.19.19"))
            put("json.path", library("com.jayway.jsonpath:json-path", "2.9.0"))
            put("json.path.assert", library("com.jayway.jsonpath:json-path-assert", "2.9.0"))
            put("json.smart", library("net.minidev:json-smart", "2.5.2"))
            put("skyscreamer.jsonassert", library("org.skyscreamer:jsonassert", "1.5.3"))
            put("jtds", library("net.sourceforge.jtds:jtds", "1.3.1"))
            put("junit", library("junit:junit", "4.13.2"))
            put("kafka.connect", library("org.apache.kafka:connect", "3.8.1"))
            put("kafka.connect.api", library("org.apache.kafka:connect-api", "3.8.1"))
            put("kafka.connect.basic.auth.extension", library("org.apache.kafka:connect-basic-auth-extension", "3.8.1"))
            put("kafka.connect.file", library("org.apache.kafka:connect-file", "3.8.1"))
            put("kafka.connect.json", library("org.apache.kafka:connect-json", "3.8.1"))
            put("kafka.connect.mirror", library("org.apache.kafka:connect-mirror", "3.8.1"))
            put("kafka.connect.mirror.client", library("org.apache.kafka:connect-mirror-client", "3.8.1"))
            put("kafka.connect.runtime", library("org.apache.kafka:connect-runtime", "3.8.1"))
            put("kafka.connect.transforms", library("org.apache.kafka:connect-transforms", "3.8.1"))
            put("kafka.generator", library("org.apache.kafka:generator", "3.8.1"))
            put("kafka.clients", library("org.apache.kafka:kafka-clients", "3.8.1"))
            put("kafka.log4j.appender", library("org.apache.kafka:kafka-log4j-appender", "3.8.1"))
            put("kafka.metadata", library("org.apache.kafka:kafka-metadata", "3.8.1"))
            put("kafka.raft", library("org.apache.kafka:kafka-raft", "3.8.1"))
            put("kafka.server", library("org.apache.kafka:kafka-server", "3.8.1"))
            put("kafka.server.common", library("org.apache.kafka:kafka-server-common", "3.8.1"))
            put("kafka.shell", library("org.apache.kafka:kafka-shell", "3.8.1"))
            put("kafka.storage", library("org.apache.kafka:kafka-storage", "3.8.1"))
            put("kafka.storage.api", library("org.apache.kafka:kafka-storage-api", "3.8.1"))
            put("kafka.streams", library("org.apache.kafka:kafka-streams", "3.8.1"))
            put("kafka.streams.scala.2.12", library("org.apache.kafka:kafka-streams-scala_2.12", "3.8.1"))
            put("kafka.streams.scala.2.13", library("org.apache.kafka:kafka-streams-scala_2.13", "3.8.1"))
            put("kafka.streams.test.utils", library("org.apache.kafka:kafka-streams-test-utils", "3.8.1"))
            put("kafka.tools", library("org.apache.kafka:kafka-tools", "3.8.1"))
            put("kafka.trogdor", library("org.apache.kafka:trogdor", "3.8.1"))
            put("lettuce.core", library("io.lettuce:lettuce-core", "6.4.2.RELEASE"))
            put("liquibase.cdi", library("org.liquibase:liquibase-cdi", "4.29.2"))
            put("liquibase.core", library("org.liquibase:liquibase-core", "4.29.2"))
            put("logback.classic", library("ch.qos.logback:logback-classic", "1.5.16"))
            put("logback.core", library("ch.qos.logback:logback-core", "1.5.16"))
            put("lombok", library("org.projectlombok:lombok", "1.18.36"))
            put("mariadb.java.client", library("org.mariadb.jdbc:mariadb-java-client", "3.4.1"))
            put("micrometer.registry.stackdriver", library("io.micrometer:micrometer-registry-stackdriver", "1.14.4"))
            put("bson", library("org.mongodb:bson", "5.2.1"))
            put("bson.record.codec", library("org.mongodb:bson-record-codec", "5.2.1"))
            put("mongodb.driver.core", library("org.mongodb:mongodb-driver-core", "5.2.1"))
            put("mongodb.driver.legacy", library("org.mongodb:mongodb-driver-legacy", "5.2.1"))
            put("mongodb.driver.reactivestreams", library("org.mongodb:mongodb-driver-reactivestreams", "5.2.1"))
            put("mongodb.driver.sync", library("org.mongodb:mongodb-driver-sync", "5.2.1"))
            put("mssql.jdbc", library("com.microsoft.sqlserver:mssql-jdbc", "12.8.1.jre11"))
            put("mysql.connector.j", library("com.mysql:mysql-connector-j", "9.1.0"))
            put("nekohtml", library("net.sourceforge.nekohtml:nekohtml", "1.9.22"))
            put("neo4j.java.driver", library("org.neo4j.driver:neo4j-java-driver", "5.28.1"))
            put("oracle.ons", library("com.oracle.database.ha:ons", "23.5.0.24.07"))
            put("oracle.simplefan", library("com.oracle.database.ha:simplefan", "23.5.0.24.07"))
            put("oracle.ojdbc11", library("com.oracle.database.jdbc:ojdbc11", "23.5.0.24.07"))
            put("oracle.ojdbc11.production", library("com.oracle.database.jdbc:ojdbc11-production", "23.5.0.24.07"))
            put("oracle.ojdbc8", library("com.oracle.database.jdbc:ojdbc8", "23.5.0.24.07"))
            put("oracle.ojdbc8.production", library("com.oracle.database.jdbc:ojdbc8-production", "23.5.0.24.07"))
            put("oracle.rsi", library("com.oracle.database.jdbc:rsi", "23.5.0.24.07"))
            put("oracle.ucp", library("com.oracle.database.jdbc:ucp", "23.5.0.24.07"))
            put("oracle.ucp11", library("com.oracle.database.jdbc:ucp11", "23.5.0.24.07"))
            put("oracle.orai18n", library("com.oracle.database.nls:orai18n", "23.5.0.24.07"))
            put("oracle.oraclepki", library("com.oracle.database.security:oraclepki", "23.5.0.24.07"))
            put("oracle.xdb", library("com.oracle.database.xml:xdb", "23.5.0.24.07"))
            put("oracle.xmlparserv2", library("com.oracle.database.xml:xmlparserv2", "23.5.0.24.07"))
            put("oracle.r2dbc", library("com.oracle.database.r2dbc:oracle-r2dbc", "1.2.0"))
            put("pooled.jms", library("org.messaginghub:pooled-jms", "3.1.7"))
            put("postgresql", library("org.postgresql:postgresql", "42.7.5"))
            put("pulsar.client.reactive.adapter", library("org.apache.pulsar:pulsar-client-reactive-adapter", "0.5.10"))
            put("pulsar.client.reactive.api", library("org.apache.pulsar:pulsar-client-reactive-api", "0.5.10"))
            put("pulsar.client.reactive.jackson", library("org.apache.pulsar:pulsar-client-reactive-jackson", "0.5.10"))
            put("pulsar.client.reactive.producer.cache.caffeine.shaded", library("org.apache.pulsar:pulsar-client-reactive-producer-cache-caffeine-shaded", "0.5.10"))
            put("pulsar.client.reactive.producer.cache.caffeine", library("org.apache.pulsar:pulsar-client-reactive-producer-cache-caffeine", "0.5.10"))
            put("quartz", library("org.quartz-scheduler:quartz", "2.3.2"))
            put("quartz.jobs", library("org.quartz-scheduler:quartz-jobs", "2.3.2"))
            put("r2dbc.h2", library("io.r2dbc:r2dbc-h2", "1.0.0.RELEASE"))
            put("r2dbc.mariadb", library("org.mariadb:r2dbc-mariadb", "1.2.2"))
            put("r2dbc.mssql", library("io.r2dbc:r2dbc-mssql", "1.0.2.RELEASE"))
            put("r2dbc.mysql", library("io.asyncer:r2dbc-mysql", "1.3.2"))
            put("r2dbc.pool", library("io.r2dbc:r2dbc-pool", "1.0.2.RELEASE"))
            put("r2dbc.postgresql", library("org.postgresql:r2dbc-postgresql", "1.0.7.RELEASE"))
            put("r2dbc.proxy", library("io.r2dbc:r2dbc-proxy", "1.1.5.RELEASE"))
            put("r2dbc.spi", library("io.r2dbc:r2dbc-spi", "1.0.0.RELEASE"))
            put("rabbitmq.amqp.client", library("com.rabbitmq:amqp-client", "5.22.0"))
            put("rabbitmq.stream.client", library("com.rabbitmq:stream-client", "0.18.0"))
            put("reactive.streams", library("org.reactivestreams:reactive-streams", "1.0.4"))
            put("rxjava", library("io.reactivex.rxjava3:rxjava", "3.1.10"))
            put("spring.boot", library("org.springframework.boot:spring-boot", "3.4.3"))
            put("spring.boot.test", library("org.springframework.boot:spring-boot-test", "3.4.3"))
            put("spring.boot.test.autoconfigure", library("org.springframework.boot:spring-boot-test-autoconfigure", "3.4.3"))
            put("spring.boot.testcontainers", library("org.springframework.boot:spring-boot-testcontainers", "3.4.3"))
            put("spring.boot.actuator", library("org.springframework.boot:spring-boot-actuator", "3.4.3"))
            put("spring.boot.actuator.autoconfigure", library("org.springframework.boot:spring-boot-actuator-autoconfigure", "3.4.3"))
            put("spring.boot.autoconfigure", library("org.springframework.boot:spring-boot-autoconfigure", "3.4.3"))
            put("spring.boot.autoconfigure.processor", library("org.springframework.boot:spring-boot-autoconfigure-processor", "3.4.3"))
            put("spring.boot.buildpack.platform", library("org.springframework.boot:spring-boot-buildpack-platform", "3.4.3"))
            put("spring.boot.configuration.metadata", library("org.springframework.boot:spring-boot-configuration-metadata", "3.4.3"))
            put("spring.boot.configuration.processor", library("org.springframework.boot:spring-boot-configuration-processor", "3.4.3"))
            put("spring.boot.devtools", library("org.springframework.boot:spring-boot-devtools", "3.4.3"))
            put("spring.boot.docker.compose", library("org.springframework.boot:spring-boot-docker-compose", "3.4.3"))
            put("spring.boot.jarmode.tools", library("org.springframework.boot:spring-boot-jarmode-tools", "3.4.3"))
            put("spring.boot.loader", library("org.springframework.boot:spring-boot-loader", "3.4.3"))
            put("spring.boot.loader.classic", library("org.springframework.boot:spring-boot-loader-classic", "3.4.3"))
            put("spring.boot.loader.tools", library("org.springframework.boot:spring-boot-loader-tools", "3.4.3"))
            put("spring.boot.properties.migrator", library("org.springframework.boot:spring-boot-properties-migrator", "3.4.3"))
            put("spring.boot.starter", library("org.springframework.boot:spring-boot-starter", "3.4.3"))
            put("spring.boot.starter.activemq", library("org.springframework.boot:spring-boot-starter-activemq", "3.4.3"))
            put("spring.boot.starter.actuator", library("org.springframework.boot:spring-boot-starter-actuator", "3.4.3"))
            put("spring.boot.starter.amqp", library("org.springframework.boot:spring-boot-starter-amqp", "3.4.3"))
            put("spring.boot.starter.aop", library("org.springframework.boot:spring-boot-starter-aop", "3.4.3"))
            put("spring.boot.starter.artemis", library("org.springframework.boot:spring-boot-starter-artemis", "3.4.3"))
            put("spring.boot.starter.batch", library("org.springframework.boot:spring-boot-starter-batch", "3.4.3"))
            put("spring.boot.starter.cache", library("org.springframework.boot:spring-boot-starter-cache", "3.4.3"))
            put("spring.boot.starter.data.cassandra", library("org.springframework.boot:spring-boot-starter-data-cassandra", "3.4.3"))
            put("spring.boot.starter.data.cassandra.reactive", library("org.springframework.boot:spring-boot-starter-data-cassandra-reactive", "3.4.3"))
            put("spring.boot.starter.data.couchbase", library("org.springframework.boot:spring-boot-starter-data-couchbase", "3.4.3"))
            put("spring.boot.starter.data.couchbase.reactive", library("org.springframework.boot:spring-boot-starter-data-couchbase-reactive", "3.4.3"))
            put("spring.boot.starter.data.elasticsearch", library("org.springframework.boot:spring-boot-starter-data-elasticsearch", "3.4.3"))
            put("spring.boot.starter.data.jdbc", library("org.springframework.boot:spring-boot-starter-data-jdbc", "3.4.3"))
            put("spring.boot.starter.data.jpa", library("org.springframework.boot:spring-boot-starter-data-jpa", "3.4.3"))
            put("spring.boot.starter.data.ldap", library("org.springframework.boot:spring-boot-starter-data-ldap", "3.4.3"))
            put("spring.boot.starter.data.mongodb", library("org.springframework.boot:spring-boot-starter-data-mongodb", "3.4.3"))
            put("spring.boot.starter.data.mongodb.reactive", library("org.springframework.boot:spring-boot-starter-data-mongodb-reactive", "3.4.3"))
            put("spring.boot.starter.data.r2dbc", library("org.springframework.boot:spring-boot-starter-data-r2dbc", "3.4.3"))
            put("spring.boot.starter.data.redis", library("org.springframework.boot:spring-boot-starter-data-redis", "3.4.3"))
            put("spring.boot.starter.data.redis.reactive", library("org.springframework.boot:spring-boot-starter-data-redis-reactive", "3.4.3"))
            put("spring.boot.starter.data.neo4j", library("org.springframework.boot:spring-boot-starter-data-neo4j", "3.4.3"))
            put("spring.boot.starter.data.rest", library("org.springframework.boot:spring-boot-starter-data-rest", "3.4.3"))
            put("spring.boot.starter.freemarker", library("org.springframework.boot:spring-boot-starter-freemarker", "3.4.3"))
            put("spring.boot.starter.graphql", library("org.springframework.boot:spring-boot-starter-graphql", "3.4.3"))
            put("spring.boot.starter.groovy.templates", library("org.springframework.boot:spring-boot-starter-groovy-templates", "3.4.3"))
            put("spring.boot.starter.hateoas", library("org.springframework.boot:spring-boot-starter-hateoas", "3.4.3"))
            put("spring.boot.starter.integration", library("org.springframework.boot:spring-boot-starter-integration", "3.4.3"))
            put("spring.boot.starter.jdbc", library("org.springframework.boot:spring-boot-starter-jdbc", "3.4.3"))
            put("spring.boot.starter.jersey", library("org.springframework.boot:spring-boot-starter-jersey", "3.4.3"))
            put("spring.boot.starter.jetty", library("org.springframework.boot:spring-boot-starter-jetty", "3.4.3"))
            put("spring.boot.starter.jooq", library("org.springframework.boot:spring-boot-starter-jooq", "3.4.3"))
            put("spring.boot.starter.json", library("org.springframework.boot:spring-boot-starter-json", "3.4.3"))
            put("spring.boot.starter.log4j2", library("org.springframework.boot:spring-boot-starter-log4j2", "3.4.3"))
            put("spring.boot.starter.logging", library("org.springframework.boot:spring-boot-starter-logging", "3.4.3"))
            put("spring.boot.starter.mail", library("org.springframework.boot:spring-boot-starter-mail", "3.4.3"))
            put("spring.boot.starter.mustache", library("org.springframework.boot:spring-boot-starter-mustache", "3.4.3"))
            put("spring.boot.starter.oauth2.authorization.server", library("org.springframework.boot:spring-boot-starter-oauth2-authorization-server", "3.4.3"))
            put("spring.boot.starter.oauth2.client", library("org.springframework.boot:spring-boot-starter-oauth2-client", "3.4.3"))
            put("spring.boot.starter.oauth2.resource.server", library("org.springframework.boot:spring-boot-starter-oauth2-resource-server", "3.4.3"))
            put("spring.boot.starter.pulsar", library("org.springframework.boot:spring-boot-starter-pulsar", "3.4.3"))
            put("spring.boot.starter.pulsar.reactive", library("org.springframework.boot:spring-boot-starter-pulsar-reactive", "3.4.3"))
            put("spring.boot.starter.quartz", library("org.springframework.boot:spring-boot-starter-quartz", "3.4.3"))
            put("spring.boot.starter.reactor.netty", library("org.springframework.boot:spring-boot-starter-reactor-netty", "3.4.3"))
            put("spring.boot.starter.rsocket", library("org.springframework.boot:spring-boot-starter-rsocket", "3.4.3"))
            put("spring.boot.starter.security", library("org.springframework.boot:spring-boot-starter-security", "3.4.3"))
            put("spring.boot.starter.test", library("org.springframework.boot:spring-boot-starter-test", "3.4.3"))
            put("spring.boot.starter.thymeleaf", library("org.springframework.boot:spring-boot-starter-thymeleaf", "3.4.3"))
            put("spring.boot.starter.tomcat", library("org.springframework.boot:spring-boot-starter-tomcat", "3.4.3"))
            put("spring.boot.starter.undertow", library("org.springframework.boot:spring-boot-starter-undertow", "3.4.3"))
            put("spring.boot.starter.validation", library("org.springframework.boot:spring-boot-starter-validation", "3.4.3"))
            put("spring.boot.starter.web", library("org.springframework.boot:spring-boot-starter-web", "3.4.3"))
            put("spring.boot.starter.webflux", library("org.springframework.boot:spring-boot-starter-webflux", "3.4.3"))
            put("spring.boot.starter.websocket", library("org.springframework.boot:spring-boot-starter-websocket", "3.4.3"))
            put("spring.boot.starter.web.services", library("org.springframework.boot:spring-boot-starter-web-services", "3.4.3"))
            put("saaj.impl", library("com.sun.xml.messaging.saaj:saaj-impl", "3.0.4"))
            put("selenium.htmlunit3.driver", library("org.seleniumhq.selenium:htmlunit3-driver", "4.25.0"))
            put("sendgrid.java", library("com.sendgrid:sendgrid-java", "4.10.3"))
            put("jcl.over.slf4j", library("org.slf4j:jcl-over-slf4j", "2.0.16"))
            put("jul.to.slf4j", library("org.slf4j:jul-to-slf4j", "2.0.16"))
            put("log4j.over.slf4j", library("org.slf4j:log4j-over-slf4j", "2.0.16"))
            put("slf4j.api", library("org.slf4j:slf4j-api", "2.0.16"))
            put("slf4j.ext", library("org.slf4j:slf4j-ext", "2.0.16"))
            put("slf4j.jdk.platform.logging", library("org.slf4j:slf4j-jdk-platform-logging", "2.0.16"))
            put("slf4j.jdk14", library("org.slf4j:slf4j-jdk14", "2.0.16"))
            put("slf4j.log4j12", library("org.slf4j:slf4j-log4j12", "2.0.16"))
            put("slf4j.nop", library("org.slf4j:slf4j-nop", "2.0.16"))
            put("slf4j.reload4j", library("org.slf4j:slf4j-reload4j", "2.0.16"))
            put("slf4j.simple", library("org.slf4j:slf4j-simple", "2.0.16"))
            put("snakeyaml", library("org.yaml:snakeyaml", "2.3"))
            put("spring.security.oauth2.authorization.server", library("org.springframework.security:spring-security-oauth2-authorization-server", "1.4.2"))
            put("spring.graphql", library("org.springframework.graphql:spring-graphql", "1.3.4"))
            put("spring.graphql.test", library("org.springframework.graphql:spring-graphql-test", "1.3.4"))
            put("spring.hateoas", library("org.springframework.hateoas:spring-hateoas", "2.4.1"))
            put("spring.kafka", library("org.springframework.kafka:spring-kafka", "3.3.3"))
            put("spring.kafka.test", library("org.springframework.kafka:spring-kafka-test", "3.3.3"))
            put("spring.ldap.core", library("org.springframework.ldap:spring-ldap-core", "3.2.11"))
            put("spring.ldap.ldif.core", library("org.springframework.ldap:spring-ldap-ldif-core", "3.2.11"))
            put("spring.ldap.odm", library("org.springframework.ldap:spring-ldap-odm", "3.2.11"))
            put("spring.ldap.test", library("org.springframework.ldap:spring-ldap-test", "3.2.11"))
            put("spring.retry", library("org.springframework.retry:spring-retry", "2.0.11"))
            put("sqlite.jdbc", library("org.xerial:sqlite-jdbc", "3.47.2.0"))
            put("testcontainers.redis", library("com.redis:testcontainers-redis", "2.2.4"))
            put("thymeleaf", library("org.thymeleaf:thymeleaf", "3.1.3.RELEASE"))
            put("thymeleaf.spring6", library("org.thymeleaf:thymeleaf-spring6", "3.1.3.RELEASE"))
            put("thymeleaf.extras.data.attribute", library("com.github.mxab.thymeleaf.extras:thymeleaf-extras-data-attribute", "2.0.1"))
            put("thymeleaf.extras.springsecurity6", library("org.thymeleaf.extras:thymeleaf-extras-springsecurity6", "3.1.3.RELEASE"))
            put("thymeleaf.layout.dialect", library("nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect", "3.3.0"))
            put("tomcat.annotations.api", library("org.apache.tomcat:tomcat-annotations-api", "10.1.36"))
            put("tomcat.jdbc", library("org.apache.tomcat:tomcat-jdbc", "10.1.36"))
            put("tomcat.jsp.api", library("org.apache.tomcat:tomcat-jsp-api", "10.1.36"))
            put("tomcat.embed.core", library("org.apache.tomcat.embed:tomcat-embed-core", "10.1.36"))
            put("tomcat.embed.el", library("org.apache.tomcat.embed:tomcat-embed-el", "10.1.36"))
            put("tomcat.embed.jasper", library("org.apache.tomcat.embed:tomcat-embed-jasper", "10.1.36"))
            put("tomcat.embed.websocket", library("org.apache.tomcat.embed:tomcat-embed-websocket", "10.1.36"))
            put("unboundid.ldapsdk", library("com.unboundid:unboundid-ldapsdk", "6.0.11"))
            put("undertow.core", library("io.undertow:undertow-core", "2.3.18.Final"))
            put("undertow.servlet", library("io.undertow:undertow-servlet", "2.3.18.Final"))
            put("undertow.websockets.jsr", library("io.undertow:undertow-websockets-jsr", "2.3.18.Final"))
            put("webjars.locator.core", library("org.webjars:webjars-locator-core", "0.59"))
            put("webjars.locator.lite", library("org.webjars:webjars-locator-lite", "1.0.1"))
            put("wsdl4j", library("wsdl4j:wsdl4j", "1.6.3"))
            put("xmlunit.assertj", library("org.xmlunit:xmlunit-assertj", "2.10.0"))
            put("xmlunit.assertj3", library("org.xmlunit:xmlunit-assertj3", "2.10.0"))
            put("xmlunit.core", library("org.xmlunit:xmlunit-core", "2.10.0"))
            put("xmlunit.jakarta.jaxb.impl", library("org.xmlunit:xmlunit-jakarta-jaxb-impl", "2.10.0"))
            put("xmlunit.legacy", library("org.xmlunit:xmlunit-legacy", "2.10.0"))
            put("xmlunit.matchers", library("org.xmlunit:xmlunit-matchers", "2.10.0"))
            put("xmlunit.placeholders", library("org.xmlunit:xmlunit-placeholders", "2.10.0"))
            put("yasson", library("org.eclipse:yasson", "3.0.4"))
            put("activemq.bom", library("org.apache.activemq:activemq-bom", "6.1.5"))
            put("artemis.bom", library("org.apache.activemq:artemis-bom", "2.37.0"))
            put("assertj.bom", library("org.assertj:assertj-bom", "3.26.3"))
            put("zipkin.reporter.bom", library("io.zipkin.reporter2:zipkin-reporter-bom", "3.4.3"))
            put("brave.bom", library("io.zipkin.brave:brave-bom", "6.0.3"))
            put("cassandra.java.driver.bom", library("org.apache.cassandra:java-driver-bom", "4.18.1"))
            put("jaxb.bom", library("org.glassfish.jaxb:jaxb-bom", "4.0.5"))
            put("groovy.bom", library("org.apache.groovy:groovy-bom", "4.0.25"))
            put("infinispan.bom", library("org.infinispan:infinispan-bom", "15.0.13.Final"))
            put("jackson.bom", library("com.fasterxml.jackson:jackson-bom", "2.18.2"))
            put("jersey.bom", library("org.glassfish.jersey:jersey-bom", "3.1.10"))
            put("jetty.ee10.bom", library("org.eclipse.jetty.ee10:jetty-ee10-bom", "12.0.16"))
            put("jetty.bom", library("org.eclipse.jetty:jetty-bom", "12.0.16"))
            put("junit.bom", library("org.junit:junit-bom", "5.11.4"))
            put("kotlin.bom", library("org.jetbrains.kotlin:kotlin-bom", "1.9.25"))
            put("kotlinx.coroutines.bom", library("org.jetbrains.kotlinx:kotlinx-coroutines-bom", "1.8.1"))
            put("kotlinx.serialization.bom", library("org.jetbrains.kotlinx:kotlinx-serialization-bom", "1.6.3"))
            put("log4j.bom", library("org.apache.logging.log4j:log4j-bom", "2.24.3"))
            put("micrometer.bom", library("io.micrometer:micrometer-bom", "1.14.4"))
            put("micrometer.tracing.bom", library("io.micrometer:micrometer-tracing-bom", "1.4.3"))
            put("mockito.bom", library("org.mockito:mockito-bom", "5.14.2"))
            put("netty.bom", library("io.netty:netty-bom", "4.1.118.Final"))
            put("opentelemetry.bom", library("io.opentelemetry:opentelemetry-bom", "1.43.0"))
            put("prometheus.metrics.bom", library("io.prometheus:prometheus-metrics-bom", "1.3.6"))
            put("simpleclient.bom", library("io.prometheus:simpleclient_bom", "0.16.0"))
            put("pulsar.bom", library("org.apache.pulsar:pulsar-bom", "3.3.4"))
            put("querydsl.bom", library("com.querydsl:querydsl-bom", "5.1.0"))
            put("reactor.bom", library("io.projectreactor:reactor-bom", "2024.0.3"))
            put("rest.assured.bom", library("io.rest-assured:rest-assured-bom", "5.5.1"))
            put("rsocket.bom", library("io.rsocket:rsocket-bom", "1.1.5"))
            put("selenium.bom", library("org.seleniumhq.selenium:selenium-bom", "4.25.0"))
            put("spring.amqp.bom", library("org.springframework.amqp:spring-amqp-bom", "3.2.3"))
            put("spring.batch.bom", library("org.springframework.batch:spring-batch-bom", "5.2.1"))
            put("spring.data.bom", library("org.springframework.data:spring-data-bom", "2024.1.3"))
            put("spring.framework.bom", library("org.springframework:spring-framework-bom", "6.2.3"))
            put("spring.integration.bom", library("org.springframework.integration:spring-integration-bom", "6.4.2"))
            put("spring.pulsar.bom", library("org.springframework.pulsar:spring-pulsar-bom", "1.2.3"))
            put("spring.restdocs.bom", library("org.springframework.restdocs:spring-restdocs-bom", "3.0.3"))
            put("spring.security.bom", library("org.springframework.security:spring-security-bom", "6.4.3"))
            put("spring.session.bom", library("org.springframework.session:spring-session-bom", "3.4.2"))
            put("spring.ws.bom", library("org.springframework.ws:spring-ws-bom", "4.0.11"))
            put("testcontainers.bom", library("org.testcontainers:testcontainers-bom", "1.20.5"))
            put("azure.sdk.bom", library("com.azure:azure-sdk-bom", "1.2.37"))
            put("azure.resourcemanager", library("com.azure.resourcemanager:azure-resourcemanager", "2.53.0"))
            put("spring.cloud.azure.actuator", library("com.azure.spring:spring-cloud-azure-actuator", "5.23.0"))
            put("spring.cloud.azure.actuator.autoconfigure", library("com.azure.spring:spring-cloud-azure-actuator-autoconfigure", "5.23.0"))
            put("spring.cloud.azure.autoconfigure", library("com.azure.spring:spring-cloud-azure-autoconfigure", "5.23.0"))
            put("spring.cloud.azure.core", library("com.azure.spring:spring-cloud-azure-core", "5.23.0"))
            put("spring.cloud.azure.resourcemanager", library("com.azure.spring:spring-cloud-azure-resourcemanager", "5.23.0"))
            put("spring.cloud.azure.service", library("com.azure.spring:spring-cloud-azure-service", "5.23.0"))
            put("spring.cloud.azure.starter", library("com.azure.spring:spring-cloud-azure-starter", "5.23.0"))
            put("spring.cloud.azure.starter.active.directory", library("com.azure.spring:spring-cloud-azure-starter-active-directory", "5.23.0"))
            put("spring.cloud.azure.starter.active.directory.b2c", library("com.azure.spring:spring-cloud-azure-starter-active-directory-b2c", "5.23.0"))
            put("spring.cloud.azure.starter.actuator", library("com.azure.spring:spring-cloud-azure-starter-actuator", "5.23.0"))
            put("spring.cloud.azure.starter.appconfiguration", library("com.azure.spring:spring-cloud-azure-starter-appconfiguration", "5.23.0"))
            put("spring.cloud.azure.starter.appconfiguration.config", library("com.azure.spring:spring-cloud-azure-starter-appconfiguration-config", "5.23.0"))
            put("spring.cloud.azure.appconfiguration.config", library("com.azure.spring:spring-cloud-azure-appconfiguration-config", "5.23.0"))
            put("spring.cloud.azure.appconfiguration.config.web", library("com.azure.spring:spring-cloud-azure-appconfiguration-config-web", "5.23.0"))
            put("spring.cloud.azure.feature.management", library("com.azure.spring:spring-cloud-azure-feature-management", "5.23.0"))
            put("spring.cloud.azure.feature.management.web", library("com.azure.spring:spring-cloud-azure-feature-management-web", "5.23.0"))
            put("spring.cloud.azure.starter.cosmos", library("com.azure.spring:spring-cloud-azure-starter-cosmos", "5.23.0"))
            put("azure.spring.data.cosmos", library("com.azure:azure-spring-data-cosmos", "5.23.0"))
            put("spring.cloud.azure.starter.data.cosmos", library("com.azure.spring:spring-cloud-azure-starter-data-cosmos", "5.23.0"))
            put("spring.cloud.azure.starter.data.redis.lettuce", library("com.azure.spring:spring-cloud-azure-starter-data-redis-lettuce", "5.23.0"))
            put("spring.cloud.azure.starter.eventhubs", library("com.azure.spring:spring-cloud-azure-starter-eventhubs", "5.23.0"))
            put("spring.cloud.azure.starter.eventgrid", library("com.azure.spring:spring-cloud-azure-starter-eventgrid", "5.23.0"))
            put("spring.cloud.azure.starter.integration.eventhubs", library("com.azure.spring:spring-cloud-azure-starter-integration-eventhubs", "5.23.0"))
            put("spring.cloud.azure.starter.integration.servicebus", library("com.azure.spring:spring-cloud-azure-starter-integration-servicebus", "5.23.0"))
            put("spring.cloud.azure.starter.integration.storage.queue", library("com.azure.spring:spring-cloud-azure-starter-integration-storage-queue", "5.23.0"))
            put("spring.cloud.azure.starter.keyvault", library("com.azure.spring:spring-cloud-azure-starter-keyvault", "5.23.0"))
            put("spring.cloud.azure.starter.keyvault.jca", library("com.azure.spring:spring-cloud-azure-starter-keyvault-jca", "5.23.0"))
            put("spring.cloud.azure.starter.keyvault.secrets", library("com.azure.spring:spring-cloud-azure-starter-keyvault-secrets", "5.23.0"))
            put("spring.cloud.azure.starter.keyvault.certificates", library("com.azure.spring:spring-cloud-azure-starter-keyvault-certificates", "5.23.0"))
            put("spring.cloud.azure.starter.monitor", library("com.azure.spring:spring-cloud-azure-starter-monitor", "5.23.0"))
            put("spring.cloud.azure.starter.servicebus", library("com.azure.spring:spring-cloud-azure-starter-servicebus", "5.23.0"))
            put("spring.cloud.azure.starter.servicebus.jms", library("com.azure.spring:spring-cloud-azure-starter-servicebus-jms", "5.23.0"))
            put("spring.cloud.azure.starter.storage", library("com.azure.spring:spring-cloud-azure-starter-storage", "5.23.0"))
            put("spring.cloud.azure.starter.storage.blob", library("com.azure.spring:spring-cloud-azure-starter-storage-blob", "5.23.0"))
            put("spring.cloud.azure.starter.storage.file.share", library("com.azure.spring:spring-cloud-azure-starter-storage-file-share", "5.23.0"))
            put("spring.cloud.azure.starter.storage.queue", library("com.azure.spring:spring-cloud-azure-starter-storage-queue", "5.23.0"))
            put("spring.cloud.azure.starter.stream.eventhubs", library("com.azure.spring:spring-cloud-azure-starter-stream-eventhubs", "5.23.0"))
            put("spring.cloud.azure.starter.stream.servicebus", library("com.azure.spring:spring-cloud-azure-starter-stream-servicebus", "5.23.0"))
            put("spring.cloud.azure.stream.binder.eventhubs", library("com.azure.spring:spring-cloud-azure-stream-binder-eventhubs", "5.23.0"))
            put("spring.cloud.azure.stream.binder.eventhubs.core", library("com.azure.spring:spring-cloud-azure-stream-binder-eventhubs-core", "5.23.0"))
            put("spring.cloud.azure.stream.binder.servicebus.core", library("com.azure.spring:spring-cloud-azure-stream-binder-servicebus-core", "5.23.0"))
            put("spring.cloud.azure.stream.binder.servicebus", library("com.azure.spring:spring-cloud-azure-stream-binder-servicebus", "5.23.0"))
            put("spring.integration.azure.core", library("com.azure.spring:spring-integration-azure-core", "5.23.0"))
            put("spring.integration.azure.eventhubs", library("com.azure.spring:spring-integration-azure-eventhubs", "5.23.0"))
            put("spring.integration.azure.servicebus", library("com.azure.spring:spring-integration-azure-servicebus", "5.23.0"))
            put("spring.integration.azure.storage.queue", library("com.azure.spring:spring-integration-azure-storage-queue", "5.23.0"))
            put("spring.messaging.azure", library("com.azure.spring:spring-messaging-azure", "5.23.0"))
            put("spring.messaging.azure.eventhubs", library("com.azure.spring:spring-messaging-azure-eventhubs", "5.23.0"))
            put("spring.messaging.azure.servicebus", library("com.azure.spring:spring-messaging-azure-servicebus", "5.23.0"))
            put("spring.messaging.azure.storage.queue", library("com.azure.spring:spring-messaging-azure-storage-queue", "5.23.0"))
            put("spring.cloud.azure.starter.jdbc.mysql", library("com.azure.spring:spring-cloud-azure-starter-jdbc-mysql", "5.23.0"))
            put("spring.cloud.azure.starter.jdbc.postgresql", library("com.azure.spring:spring-cloud-azure-starter-jdbc-postgresql", "5.23.0"))
            put("spring.cloud.azure.docker.compose", library("com.azure.spring:spring-cloud-azure-docker-compose", "5.23.0"))
            put("spring.cloud.azure.testcontainers", library("com.azure.spring:spring-cloud-azure-testcontainers", "5.23.0"))
            put("spring.boot.admin.server", library("de.codecentric:spring-boot-admin-server", "3.5.0"))
            put("spring.boot.admin.server.ui", library("de.codecentric:spring-boot-admin-server-ui", "3.5.0"))
            put("spring.boot.admin.client", library("de.codecentric:spring-boot-admin-client", "3.5.0"))
            put("spring.boot.admin.starter.client", library("de.codecentric:spring-boot-admin-starter-client", "3.5.0"))
            put("spring.boot.admin.starter.server", library("de.codecentric:spring-boot-admin-starter-server", "3.5.0"))
            put("spring.boot.admin.server.cloud", library("de.codecentric:spring-boot-admin-server-cloud", "3.5.0"))
            put("graphql.dgs.platform", library("com.netflix.graphql.dgs:graphql-dgs-platform", "10.2.1"))
            put("spring.shell.autoconfigure", library("org.springframework.shell:spring-shell-autoconfigure", "3.4.1"))
            put("spring.shell.core", library("org.springframework.shell:spring-shell-core", "3.4.1"))
            put("spring.shell.core.test.support", library("org.springframework.shell:spring-shell-core-test-support", "3.4.1"))
            put("spring.shell.standard", library("org.springframework.shell:spring-shell-standard", "3.4.1"))
            put("spring.shell.standard.commands", library("org.springframework.shell:spring-shell-standard-commands", "3.4.1"))
            put("spring.shell.table", library("org.springframework.shell:spring-shell-table", "3.4.1"))
            put("spring.shell.test", library("org.springframework.shell:spring-shell-test", "3.4.1"))
            put("spring.shell.test.autoconfigure", library("org.springframework.shell:spring-shell-test-autoconfigure", "3.4.1"))
            put("spring.shell.starter", library("org.springframework.shell:spring-shell-starter", "3.4.1"))
            put("spring.shell.starter.jansi", library("org.springframework.shell:spring-shell-starter-jansi", "3.4.1"))
            put("spring.shell.starter.jna", library("org.springframework.shell:spring-shell-starter-jna", "3.4.1"))
            put("spring.shell.starter.jni", library("org.springframework.shell:spring-shell-starter-jni", "3.4.1"))
            put("spring.shell.starter.test", library("org.springframework.shell:spring-shell-starter-test", "3.4.1"))
            put("spring.modulith.actuator", library("org.springframework.modulith:spring-modulith-actuator", "1.4.1"))
            put("spring.modulith.api", library("org.springframework.modulith:spring-modulith-api", "1.4.1"))
            put("spring.modulith.apt", library("org.springframework.modulith:spring-modulith-apt", "1.4.1"))
            put("spring.modulith.core", library("org.springframework.modulith:spring-modulith-core", "1.4.1"))
            put("spring.modulith.docs", library("org.springframework.modulith:spring-modulith-docs", "1.4.1"))
            put("spring.modulith.events.amqp", library("org.springframework.modulith:spring-modulith-events-amqp", "1.4.1"))
            put("spring.modulith.events.api", library("org.springframework.modulith:spring-modulith-events-api", "1.4.1"))
            put("spring.modulith.events.aws.sns", library("org.springframework.modulith:spring-modulith-events-aws-sns", "1.4.0-SNAPSHOT"))
            put("spring.modulith.events.aws.sqs", library("org.springframework.modulith:spring-modulith-events-aws-sqs", "1.4.0-SNAPSHOT"))
            put("spring.modulith.events.core", library("org.springframework.modulith:spring-modulith-events-core", "1.4.1"))
            put("spring.modulith.events.jackson", library("org.springframework.modulith:spring-modulith-events-jackson", "1.4.1"))
            put("spring.modulith.events.jdbc", library("org.springframework.modulith:spring-modulith-events-jdbc", "1.4.1"))
            put("spring.modulith.events.jms", library("org.springframework.modulith:spring-modulith-events-jms", "1.4.1"))
            put("spring.modulith.events.jpa", library("org.springframework.modulith:spring-modulith-events-jpa", "1.4.1"))
            put("spring.modulith.events.kafka", library("org.springframework.modulith:spring-modulith-events-kafka", "1.4.1"))
            put("spring.modulith.events.messaging", library("org.springframework.modulith:spring-modulith-events-messaging", "1.4.1"))
            put("spring.modulith.events.mongodb", library("org.springframework.modulith:spring-modulith-events-mongodb", "1.4.1"))
            put("spring.modulith.events.tests", library("org.springframework.modulith:spring-modulith-events-tests", "1.4.1"))
            put("spring.modulith.junit", library("org.springframework.modulith:spring-modulith-junit", "1.4.1"))
            put("spring.modulith.moments", library("org.springframework.modulith:spring-modulith-moments", "1.4.1"))
            put("spring.modulith.observability", library("org.springframework.modulith:spring-modulith-observability", "1.4.1"))
            put("spring.modulith.runtime", library("org.springframework.modulith:spring-modulith-runtime", "1.4.1"))
            put("spring.modulith.starter.core", library("org.springframework.modulith:spring-modulith-starter-core", "1.4.1"))
            put("spring.modulith.starter.insight", library("org.springframework.modulith:spring-modulith-starter-insight", "1.4.1"))
            put("spring.modulith.starter.jdbc", library("org.springframework.modulith:spring-modulith-starter-jdbc", "1.4.1"))
            put("spring.modulith.starter.jpa", library("org.springframework.modulith:spring-modulith-starter-jpa", "1.4.1"))
            put("spring.modulith.starter.mongodb", library("org.springframework.modulith:spring-modulith-starter-mongodb", "1.4.1"))
            put("spring.modulith.starter.neo4j", library("org.springframework.modulith:spring-modulith-starter-neo4j", "1.4.1"))
            put("spring.modulith.starter.test", library("org.springframework.modulith:spring-modulith-starter-test", "1.4.1"))
            put("spring.modulith.test", library("org.springframework.modulith:spring-modulith-test", "1.4.1"))
            put("java.cfenv", library("io.pivotal.cfenv:java-cfenv", "3.4.0"))
            put("spring.cloud.services.config.client.autoconfigure", library("io.pivotal.spring.cloud:spring-cloud-services-config-client-autoconfigure", "4.3.0"))
            put("spring.cloud.services.service.registry.autoconfigure", library("io.pivotal.spring.cloud:spring-cloud-services-service-registry-autoconfigure", "4.3.0"))
            put("spring.cloud.services.starter.config.client", library("io.pivotal.spring.cloud:spring-cloud-services-starter-config-client", "4.3.0"))
            put("spring.cloud.services.starter.service.registry", library("io.pivotal.spring.cloud:spring-cloud-services-starter-service-registry", "4.3.0"))
            put("java.cfenv.boot.pivotal.scs", library("io.pivotal.cfenv:java-cfenv-boot-pivotal-scs", "3.4.0"))
            put("spring.cloud.gcp.core", library("com.google.cloud:spring-cloud-gcp-core", "7.1.0"))
            put("spring.cloud.gcp.autoconfigure", library("com.google.cloud:spring-cloud-gcp-autoconfigure", "7.1.0"))
            put("spring.cloud.gcp.cloudfoundry", library("com.google.cloud:spring-cloud-gcp-cloudfoundry", "7.1.0"))
            put("spring.cloud.gcp.pubsub", library("com.google.cloud:spring-cloud-gcp-pubsub", "7.1.0"))
            put("spring.cloud.gcp.data.firestore", library("com.google.cloud:spring-cloud-gcp-data-firestore", "7.1.0"))
            put("spring.cloud.gcp.data.datastore", library("com.google.cloud:spring-cloud-gcp-data-datastore", "7.1.0"))
            put("spring.cloud.gcp.data.spanner", library("com.google.cloud:spring-cloud-gcp-data-spanner", "7.1.0"))
            put("spring.cloud.gcp.storage", library("com.google.cloud:spring-cloud-gcp-storage", "7.1.0"))
            put("spring.cloud.gcp.logging", library("com.google.cloud:spring-cloud-gcp-logging", "7.1.0"))
            put("spring.cloud.gcp.pubsub.stream.binder", library("com.google.cloud:spring-cloud-gcp-pubsub-stream-binder", "7.1.0"))
            put("spring.cloud.gcp.security.iap", library("com.google.cloud:spring-cloud-gcp-security-iap", "7.1.0"))
            put("spring.cloud.gcp.vision", library("com.google.cloud:spring-cloud-gcp-vision", "7.1.0"))
            put("spring.cloud.gcp.bigquery", library("com.google.cloud:spring-cloud-gcp-bigquery", "7.1.0"))
            put("spring.cloud.gcp.security.firebase", library("com.google.cloud:spring-cloud-gcp-security-firebase", "7.1.0"))
            put("spring.cloud.gcp.secretmanager", library("com.google.cloud:spring-cloud-gcp-secretmanager", "7.1.0"))
            put("spring.cloud.gcp.kms", library("com.google.cloud:spring-cloud-gcp-kms", "7.1.0"))
            put("spring.cloud.gcp.starter", library("com.google.cloud:spring-cloud-gcp-starter", "7.1.0"))
            put("spring.cloud.gcp.starter.bus.pubsub", library("com.google.cloud:spring-cloud-gcp-starter-bus-pubsub", "7.1.0"))
            put("spring.cloud.gcp.starter.cloudfoundry", library("com.google.cloud:spring-cloud-gcp-starter-cloudfoundry", "7.1.0"))
            put("spring.cloud.gcp.starter.pubsub", library("com.google.cloud:spring-cloud-gcp-starter-pubsub", "7.1.0"))
            put("spring.cloud.gcp.starter.storage", library("com.google.cloud:spring-cloud-gcp-starter-storage", "7.1.0"))
            put("spring.cloud.gcp.starter.data.spanner", library("com.google.cloud:spring-cloud-gcp-starter-data-spanner", "7.1.0"))
            put("spring.cloud.gcp.starter.data.datastore", library("com.google.cloud:spring-cloud-gcp-starter-data-datastore", "7.1.0"))
            put("spring.cloud.gcp.starter.data.firestore", library("com.google.cloud:spring-cloud-gcp-starter-data-firestore", "7.1.0"))
            put("spring.cloud.gcp.starter.firestore", library("com.google.cloud:spring-cloud-gcp-starter-firestore", "7.1.0"))
            put("spring.cloud.gcp.starter.sql.mysql", library("com.google.cloud:spring-cloud-gcp-starter-sql-mysql", "7.1.0"))
            put("spring.cloud.gcp.starter.sql.postgresql", library("com.google.cloud:spring-cloud-gcp-starter-sql-postgresql", "7.1.0"))
            put("spring.cloud.gcp.starter.sql.mysql.r2dbc", library("com.google.cloud:spring-cloud-gcp-starter-sql-mysql-r2dbc", "7.1.0"))
            put("spring.cloud.gcp.starter.sql.postgres.r2dbc", library("com.google.cloud:spring-cloud-gcp-starter-sql-postgres-r2dbc", "7.1.0"))
            put("spring.cloud.gcp.starter.trace", library("com.google.cloud:spring-cloud-gcp-starter-trace", "7.1.0"))
            put("spring.cloud.gcp.starter.logging", library("com.google.cloud:spring-cloud-gcp-starter-logging", "7.1.0"))
            put("spring.cloud.gcp.starter.metrics", library("com.google.cloud:spring-cloud-gcp-starter-metrics", "7.1.0"))
            put("spring.cloud.gcp.starter.security.iap", library("com.google.cloud:spring-cloud-gcp-starter-security-iap", "7.1.0"))
            put("spring.cloud.gcp.starter.security.firebase", library("com.google.cloud:spring-cloud-gcp-starter-security-firebase", "7.1.0"))
            put("spring.cloud.gcp.starter.vision", library("com.google.cloud:spring-cloud-gcp-starter-vision", "7.1.0"))
            put("spring.cloud.gcp.starter.bigquery", library("com.google.cloud:spring-cloud-gcp-starter-bigquery", "7.1.0"))
            put("spring.cloud.gcp.starter.secretmanager", library("com.google.cloud:spring-cloud-gcp-starter-secretmanager", "7.1.0"))
            put("spring.cloud.gcp.starter.kms", library("com.google.cloud:spring-cloud-gcp-starter-kms", "7.1.0"))
            put("spring.cloud.spanner.spring.data.r2dbc", library("com.google.cloud:spring-cloud-spanner-spring-data-r2dbc", "7.1.0"))
            put("spring.cloud.gcp.starter.alloydb", library("com.google.cloud:spring-cloud-gcp-starter-alloydb", "7.1.0"))
            put("google.cloud.alloydb.jdbc.connector", library("com.google.cloud:alloydb-jdbc-connector", "1.2.0"))
            put("google.cloud.sql.jdbc.socket.factory.core", library("com.google.cloud.sql:jdbc-socket-factory-core", "1.25.0"))
            put("google.cloud.sql.mysql.socket.factory.connector.j8", library("com.google.cloud.sql:mysql-socket-factory-connector-j-8", "1.25.0"))
            put("google.cloud.sql.postgres.socket.factory", library("com.google.cloud.sql:postgres-socket-factory", "1.25.0"))
            put("google.cloud.sql.connector.r2dbc.postgres", library("com.google.cloud.sql:cloud-sql-connector-r2dbc-postgres", "1.25.0"))
            put("google.cloud.spanner.r2dbc", library("com.google.cloud:cloud-spanner-r2dbc", "1.3.0"))
            put("google.cloud.libraries.bom", library("com.google.cloud:libraries-bom", "26.65.0"))
            put("opentelemetry.api", library("io.opentelemetry:opentelemetry-api", "1.47.0"))
            put("vaadin.spring.bom", library("com.vaadin:vaadin-spring-bom", "24.8.6"))
            put("vaadin.testbench.bom", library("com.vaadin:vaadin-testbench-bom", "9.4.3"))
            put("slf4j.bom", library("org.slf4j:slf4j-bom", "2.0.11"))
            put("vaadin.cdi", library("com.vaadin:vaadin-cdi", "15.2.1"))
            put("vaadin.classic.components.flow", library("com.vaadin:vaadin-classic-components-flow", "24.2.1"))
            put("vaadin.feature.pack.flow", library("com.vaadin:vaadin-feature-pack-flow", "24.8.0"))
            put("appsec.kit.starter", library("com.vaadin:appsec-kit-starter", "3.3.0"))
            put("collaboration.engine", library("com.vaadin:collaboration-engine", "6.5.0"))
            put("kubernetes.kit.starter", library("com.vaadin:kubernetes-kit-starter", "2.4.2"))
            put("sso.kit.starter", library("com.vaadin:sso-kit-starter", "3.1.2"))
            put("sso.kit.starter.hilla", library("com.vaadin:sso-kit-starter-hilla", "3.1.2"))
            put("observability.kit.starter", library("com.vaadin:observability-kit-starter", "3.1.0"))
            put("observability.kit.starter.hilla", library("com.vaadin:observability-kit-starter-hilla", "3.1.0"))
            put("vaadin.swing.kit.flow", library("com.vaadin:vaadin-swing-kit-flow", "2.4.0"))
            put("vaadin.swing.kit.client", library("com.vaadin:vaadin-swing-kit-client", "2.4.0"))
            put("vaadin.swing.kit.client.api", library("com.vaadin:vaadin-swing-kit-client-api", "2.4.0"))
            put("control.center.starter", library("com.vaadin:control-center-starter", "1.3.1"))
            put("jna", library("net.java.dev.jna:jna", "5.15.0"))
            put("jna.platform", library("net.java.dev.jna:jna-platform", "5.15.0"))
            put("spring.ai.commons", library("org.springframework.ai:spring-ai-commons", "1.0.1"))
            put("spring.ai.template.st", library("org.springframework.ai:spring-ai-template-st", "1.0.1"))
            put("spring.ai.model", library("org.springframework.ai:spring-ai-model", "1.0.1"))
            put("spring.ai.vector.store", library("org.springframework.ai:spring-ai-vector-store", "1.0.1"))
            put("spring.ai.rag", library("org.springframework.ai:spring-ai-rag", "1.0.1"))
            put("spring.ai.advisors.vector.store", library("org.springframework.ai:spring-ai-advisors-vector-store", "1.0.1"))
            put("spring.ai.retry", library("org.springframework.ai:spring-ai-retry", "1.0.1"))
            put("spring.ai.client.chat", library("org.springframework.ai:spring-ai-client-chat", "1.0.1"))
            put("spring.ai.mcp", library("org.springframework.ai:spring-ai-mcp", "1.0.1"))
            put("spring.ai.jsoup.document.reader", library("org.springframework.ai:spring-ai-jsoup-document-reader", "1.0.1"))
            put("spring.ai.markdown.document.reader", library("org.springframework.ai:spring-ai-markdown-document-reader", "1.0.1"))
            put("spring.ai.pdf.document.reader", library("org.springframework.ai:spring-ai-pdf-document-reader", "1.0.1"))
            put("spring.ai.tika.document.reader", library("org.springframework.ai:spring-ai-tika-document-reader", "1.0.1"))
            put("spring.ai.spring.cloud.bindings", library("org.springframework.ai:spring-ai-spring-cloud-bindings", "1.0.1"))
            put("spring.ai.model.chat.memory", library("org.springframework.ai:spring-ai-model-chat-memory", "1.0.1"))
            put("spring.ai.model.chat.memory.repository.cassandra", library("org.springframework.ai:spring-ai-model-chat-memory-repository-cassandra", "1.0.1"))
            put("spring.ai.model.chat.memory.repository.jdbc", library("org.springframework.ai:spring-ai-model-chat-memory-repository-jdbc", "1.0.1"))
            put("spring.ai.model.chat.memory.repository.neo4j", library("org.springframework.ai:spring-ai-model-chat-memory-repository-neo4j", "1.0.1"))
            put("spring.ai.anthropic", library("org.springframework.ai:spring-ai-anthropic", "1.0.1"))
            put("spring.ai.azure.openai", library("org.springframework.ai:spring-ai-azure-openai", "1.0.1"))
            put("spring.ai.bedrock", library("org.springframework.ai:spring-ai-bedrock", "1.0.1"))
            put("spring.ai.bedrock.converse", library("org.springframework.ai:spring-ai-bedrock-converse", "1.0.1"))
            put("spring.ai.huggingface", library("org.springframework.ai:spring-ai-huggingface", "1.0.1"))
            put("spring.ai.minimax", library("org.springframework.ai:spring-ai-minimax", "1.0.1"))
            put("spring.ai.mistral.ai", library("org.springframework.ai:spring-ai-mistral-ai", "1.0.1"))
            put("spring.ai.oci.genai", library("org.springframework.ai:spring-ai-oci-genai", "1.0.1"))
            put("spring.ai.ollama", library("org.springframework.ai:spring-ai-ollama", "1.0.1"))
            put("spring.ai.openai", library("org.springframework.ai:spring-ai-openai", "1.0.1"))
            put("spring.ai.postgresml", library("org.springframework.ai:spring-ai-postgresml", "1.0.1"))
            put("spring.ai.stability.ai", library("org.springframework.ai:spring-ai-stability-ai", "1.0.1"))
            put("spring.ai.transformers", library("org.springframework.ai:spring-ai-transformers", "1.0.1"))
            put("spring.ai.vertex.ai.embedding", library("org.springframework.ai:spring-ai-vertex-ai-embedding", "1.0.1"))
            put("spring.ai.vertex.ai.gemini", library("org.springframework.ai:spring-ai-vertex-ai-gemini", "1.0.1"))
            put("spring.ai.zhipuai", library("org.springframework.ai:spring-ai-zhipuai", "1.0.1"))
            put("spring.ai.deepseek", library("org.springframework.ai:spring-ai-deepseek", "1.0.1"))
            put("spring.ai.azure.cosmos.db.store", library("org.springframework.ai:spring-ai-azure-cosmos-db-store", "1.0.1"))
            put("spring.ai.azure.store", library("org.springframework.ai:spring-ai-azure-store", "1.0.1"))
            put("spring.ai.cassandra.store", library("org.springframework.ai:spring-ai-cassandra-store", "1.0.1"))
            put("spring.ai.chroma.store", library("org.springframework.ai:spring-ai-chroma-store", "1.0.1"))
            put("spring.ai.coherence.store", library("org.springframework.ai:spring-ai-coherence-store", "1.0.1"))
            put("spring.ai.elasticsearch.store", library("org.springframework.ai:spring-ai-elasticsearch-store", "1.0.1"))
            put("spring.ai.gemfire.store", library("org.springframework.ai:spring-ai-gemfire-store", "1.0.1"))
            put("spring.ai.hanadb.store", library("org.springframework.ai:spring-ai-hanadb-store", "1.0.1"))
            put("spring.ai.mariadb.store", library("org.springframework.ai:spring-ai-mariadb-store", "1.0.1"))
            put("spring.ai.milvus.store", library("org.springframework.ai:spring-ai-milvus-store", "1.0.1"))
            put("spring.ai.mongodb.atlas.store", library("org.springframework.ai:spring-ai-mongodb-atlas-store", "1.0.1"))
            put("spring.ai.neo4j.store", library("org.springframework.ai:spring-ai-neo4j-store", "1.0.1"))
            put("spring.ai.opensearch.store", library("org.springframework.ai:spring-ai-opensearch-store", "1.0.1"))
            put("spring.ai.oracle.store", library("org.springframework.ai:spring-ai-oracle-store", "1.0.1"))
            put("spring.ai.pgvector.store", library("org.springframework.ai:spring-ai-pgvector-store", "1.0.1"))
            put("spring.ai.pinecone.store", library("org.springframework.ai:spring-ai-pinecone-store", "1.0.1"))
            put("spring.ai.qdrant.store", library("org.springframework.ai:spring-ai-qdrant-store", "1.0.1"))
            put("spring.ai.redis.store", library("org.springframework.ai:spring-ai-redis-store", "1.0.1"))
            put("spring.ai.typesense.store", library("org.springframework.ai:spring-ai-typesense-store", "1.0.1"))
            put("spring.ai.weaviate.store", library("org.springframework.ai:spring-ai-weaviate-store", "1.0.1"))
            put("spring.ai.couchbase.store", library("org.springframework.ai:spring-ai-couchbase-store", "1.0.1"))
            put("spring.ai.autoconfigure.retry", library("org.springframework.ai:spring-ai-autoconfigure-retry", "1.0.1"))
            put("spring.ai.autoconfigure.model.chat.client", library("org.springframework.ai:spring-ai-autoconfigure-model-chat-client", "1.0.1"))
            put("spring.ai.autoconfigure.model.chat.memory", library("org.springframework.ai:spring-ai-autoconfigure-model-chat-memory", "1.0.1"))
            put("spring.ai.autoconfigure.model.chat.memory.repository.cassandra", library("org.springframework.ai:spring-ai-autoconfigure-model-chat-memory-repository-cassandra", "1.0.1"))
            put("spring.ai.autoconfigure.model.chat.memory.repository.jdbc", library("org.springframework.ai:spring-ai-autoconfigure-model-chat-memory-repository-jdbc", "1.0.1"))
            put("spring.ai.autoconfigure.model.chat.memory.repository.neo4j", library("org.springframework.ai:spring-ai-autoconfigure-model-chat-memory-repository-neo4j", "1.0.1"))
            put("spring.ai.autoconfigure.model.chat.observation", library("org.springframework.ai:spring-ai-autoconfigure-model-chat-observation", "1.0.1"))
            put("spring.ai.autoconfigure.model.embedding.observation", library("org.springframework.ai:spring-ai-autoconfigure-model-embedding-observation", "1.0.1"))
            put("spring.ai.autoconfigure.model.image.observation", library("org.springframework.ai:spring-ai-autoconfigure-model-image-observation", "1.0.1"))
            put("spring.ai.autoconfigure.mcp.client", library("org.springframework.ai:spring-ai-autoconfigure-mcp-client", "1.0.1"))
            put("spring.ai.autoconfigure.mcp.server", library("org.springframework.ai:spring-ai-autoconfigure-mcp-server", "1.0.1"))
            put("spring.ai.autoconfigure.model.tool", library("org.springframework.ai:spring-ai-autoconfigure-model-tool", "1.0.1"))
            put("spring.ai.autoconfigure.model.anthropic", library("org.springframework.ai:spring-ai-autoconfigure-model-anthropic", "1.0.1"))
            put("spring.ai.autoconfigure.model.azure.openai", library("org.springframework.ai:spring-ai-autoconfigure-model-azure-openai", "1.0.1"))
            put("spring.ai.autoconfigure.model.bedrock.ai", library("org.springframework.ai:spring-ai-autoconfigure-model-bedrock-ai", "1.0.1"))
            put("spring.ai.autoconfigure.model.huggingface", library("org.springframework.ai:spring-ai-autoconfigure-model-huggingface", "1.0.1"))
            put("spring.ai.autoconfigure.model.minimax", library("org.springframework.ai:spring-ai-autoconfigure-model-minimax", "1.0.1"))
            put("spring.ai.autoconfigure.model.mistral.ai", library("org.springframework.ai:spring-ai-autoconfigure-model-mistral-ai", "1.0.1"))
            put("spring.ai.autoconfigure.model.oci.genai", library("org.springframework.ai:spring-ai-autoconfigure-model-oci-genai", "1.0.1"))
            put("spring.ai.autoconfigure.model.ollama", library("org.springframework.ai:spring-ai-autoconfigure-model-ollama", "1.0.1"))
            put("spring.ai.autoconfigure.model.openai", library("org.springframework.ai:spring-ai-autoconfigure-model-openai", "1.0.1"))
            put("spring.ai.autoconfigure.model.postgresml.embedding", library("org.springframework.ai:spring-ai-autoconfigure-model-postgresml-embedding", "1.0.1"))
            put("spring.ai.autoconfigure.model.stability.ai", library("org.springframework.ai:spring-ai-autoconfigure-model-stability-ai", "1.0.1"))
            put("spring.ai.autoconfigure.model.transformers", library("org.springframework.ai:spring-ai-autoconfigure-model-transformers", "1.0.1"))
            put("spring.ai.autoconfigure.model.vertex.ai", library("org.springframework.ai:spring-ai-autoconfigure-model-vertex-ai", "1.0.1"))
            put("spring.ai.autoconfigure.model.zhipuai", library("org.springframework.ai:spring-ai-autoconfigure-model-zhipuai", "1.0.1"))
            put("spring.ai.autoconfigure.model.deepseek", library("org.springframework.ai:spring-ai-autoconfigure-model-deepseek", "1.0.1"))
            put("spring.ai.autoconfigure.vector.store.azure", library("org.springframework.ai:spring-ai-autoconfigure-vector-store-azure", "1.0.1"))
            put("spring.ai.autoconfigure.vector.store.azure.cosmos.db", library("org.springframework.ai:spring-ai-autoconfigure-vector-store-azure-cosmos-db", "1.0.1"))
            put("spring.ai.autoconfigure.vector.store.cassandra", library("org.springframework.ai:spring-ai-autoconfigure-vector-store-cassandra", "1.0.1"))
            put("spring.ai.autoconfigure.vector.store.chroma", library("org.springframework.ai:spring-ai-autoconfigure-vector-store-chroma", "1.0.1"))
            put("spring.ai.autoconfigure.vector.store.couchbase", library("org.springframework.ai:spring-ai-autoconfigure-vector-store-couchbase", "1.0.1"))
            put("spring.ai.autoconfigure.vector.store.elasticsearch", library("org.springframework.ai:spring-ai-autoconfigure-vector-store-elasticsearch", "1.0.1"))
            put("spring.ai.autoconfigure.vector.store.gemfire", library("org.springframework.ai:spring-ai-autoconfigure-vector-store-gemfire", "1.0.1"))
            put("spring.ai.autoconfigure.vector.store.mariadb", library("org.springframework.ai:spring-ai-autoconfigure-vector-store-mariadb", "1.0.1"))
            put("spring.ai.autoconfigure.vector.store.milvus", library("org.springframework.ai:spring-ai-autoconfigure-vector-store-milvus", "1.0.1"))
            put("spring.ai.autoconfigure.vector.store.mongodb.atlas", library("org.springframework.ai:spring-ai-autoconfigure-vector-store-mongodb-atlas", "1.0.1"))
            put("spring.ai.autoconfigure.vector.store.neo4j", library("org.springframework.ai:spring-ai-autoconfigure-vector-store-neo4j", "1.0.1"))
            put("spring.ai.autoconfigure.vector.store.observation", library("org.springframework.ai:spring-ai-autoconfigure-vector-store-observation", "1.0.1"))
            put("spring.ai.autoconfigure.vector.store.opensearch", library("org.springframework.ai:spring-ai-autoconfigure-vector-store-opensearch", "1.0.1"))
            put("spring.ai.autoconfigure.vector.store.oracle", library("org.springframework.ai:spring-ai-autoconfigure-vector-store-oracle", "1.0.1"))
            put("spring.ai.autoconfigure.vector.store.pgvector", library("org.springframework.ai:spring-ai-autoconfigure-vector-store-pgvector", "1.0.1"))
            put("spring.ai.autoconfigure.vector.store.pinecone", library("org.springframework.ai:spring-ai-autoconfigure-vector-store-pinecone", "1.0.1"))
            put("spring.ai.autoconfigure.vector.store.qdrant", library("org.springframework.ai:spring-ai-autoconfigure-vector-store-qdrant", "1.0.1"))
            put("spring.ai.autoconfigure.vector.store.redis", library("org.springframework.ai:spring-ai-autoconfigure-vector-store-redis", "1.0.1"))
            put("spring.ai.autoconfigure.vector.store.typesense", library("org.springframework.ai:spring-ai-autoconfigure-vector-store-typesense", "1.0.1"))
            put("spring.ai.autoconfigure.vector.store.weaviate", library("org.springframework.ai:spring-ai-autoconfigure-vector-store-weaviate", "1.0.1"))
            put("spring.ai.starter.vector.store.aws.opensearch", library("org.springframework.ai:spring-ai-starter-vector-store-aws-opensearch", "1.0.1"))
            put("spring.ai.starter.vector.store.azure", library("org.springframework.ai:spring-ai-starter-vector-store-azure", "1.0.1"))
            put("spring.ai.starter.vector.store.azure.cosmos.db", library("org.springframework.ai:spring-ai-starter-vector-store-azure-cosmos-db", "1.0.1"))
            put("spring.ai.starter.vector.store.cassandra", library("org.springframework.ai:spring-ai-starter-vector-store-cassandra", "1.0.1"))
            put("spring.ai.starter.vector.store.chroma", library("org.springframework.ai:spring-ai-starter-vector-store-chroma", "1.0.1"))
            put("spring.ai.starter.vector.store.couchbase", library("org.springframework.ai:spring-ai-starter-vector-store-couchbase", "1.0.1"))
            put("spring.ai.starter.vector.store.elasticsearch", library("org.springframework.ai:spring-ai-starter-vector-store-elasticsearch", "1.0.1"))
            put("spring.ai.starter.vector.store.gemfire", library("org.springframework.ai:spring-ai-starter-vector-store-gemfire", "1.0.1"))
            put("spring.ai.starter.vector.store.mariadb", library("org.springframework.ai:spring-ai-starter-vector-store-mariadb", "1.0.1"))
            put("spring.ai.starter.vector.store.milvus", library("org.springframework.ai:spring-ai-starter-vector-store-milvus", "1.0.1"))
            put("spring.ai.starter.vector.store.mongodb.atlas", library("org.springframework.ai:spring-ai-starter-vector-store-mongodb-atlas", "1.0.1"))
            put("spring.ai.starter.vector.store.neo4j", library("org.springframework.ai:spring-ai-starter-vector-store-neo4j", "1.0.1"))
            put("spring.ai.starter.vector.store.opensearch", library("org.springframework.ai:spring-ai-starter-vector-store-opensearch", "1.0.1"))
            put("spring.ai.starter.vector.store.oracle", library("org.springframework.ai:spring-ai-starter-vector-store-oracle", "1.0.1"))
            put("spring.ai.starter.vector.store.pgvector", library("org.springframework.ai:spring-ai-starter-vector-store-pgvector", "1.0.1"))
            put("spring.ai.starter.vector.store.pinecone", library("org.springframework.ai:spring-ai-starter-vector-store-pinecone", "1.0.1"))
            put("spring.ai.starter.vector.store.qdrant", library("org.springframework.ai:spring-ai-starter-vector-store-qdrant", "1.0.1"))
            put("spring.ai.starter.vector.store.redis", library("org.springframework.ai:spring-ai-starter-vector-store-redis", "1.0.1"))
            put("spring.ai.starter.vector.store.typesense", library("org.springframework.ai:spring-ai-starter-vector-store-typesense", "1.0.1"))
            put("spring.ai.starter.vector.store.weaviate", library("org.springframework.ai:spring-ai-starter-vector-store-weaviate", "1.0.1"))
            put("spring.ai.starter.model.anthropic", library("org.springframework.ai:spring-ai-starter-model-anthropic", "1.0.1"))
            put("spring.ai.starter.model.azure.openai", library("org.springframework.ai:spring-ai-starter-model-azure-openai", "1.0.1"))
            put("spring.ai.starter.model.bedrock", library("org.springframework.ai:spring-ai-starter-model-bedrock", "1.0.1"))
            put("spring.ai.starter.model.bedrock.converse", library("org.springframework.ai:spring-ai-starter-model-bedrock-converse", "1.0.1"))
            put("spring.ai.starter.model.huggingface", library("org.springframework.ai:spring-ai-starter-model-huggingface", "1.0.1"))
            put("spring.ai.starter.model.minimax", library("org.springframework.ai:spring-ai-starter-model-minimax", "1.0.1"))
            put("spring.ai.starter.model.mistral.ai", library("org.springframework.ai:spring-ai-starter-model-mistral-ai", "1.0.1"))
            put("spring.ai.starter.model.oci.genai", library("org.springframework.ai:spring-ai-starter-model-oci-genai", "1.0.1"))
            put("spring.ai.starter.model.ollama", library("org.springframework.ai:spring-ai-starter-model-ollama", "1.0.1"))
            put("spring.ai.starter.model.openai", library("org.springframework.ai:spring-ai-starter-model-openai", "1.0.1"))
            put("spring.ai.starter.model.postgresml.embedding", library("org.springframework.ai:spring-ai-starter-model-postgresml-embedding", "1.0.1"))
            put("spring.ai.starter.model.stability.ai", library("org.springframework.ai:spring-ai-starter-model-stability-ai", "1.0.1"))
            put("spring.ai.starter.model.transformers", library("org.springframework.ai:spring-ai-starter-model-transformers", "1.0.1"))
            put("spring.ai.starter.model.vertex.ai.embedding", library("org.springframework.ai:spring-ai-starter-model-vertex-ai-embedding", "1.0.1"))
            put("spring.ai.starter.model.vertex.ai.gemini", library("org.springframework.ai:spring-ai-starter-model-vertex-ai-gemini", "1.0.1"))
            put("spring.ai.starter.model.zhipuai", library("org.springframework.ai:spring-ai-starter-model-zhipuai", "1.0.1"))
            put("spring.ai.starter.model.deepseek", library("org.springframework.ai:spring-ai-starter-model-deepseek", "1.0.1"))
            put("spring.ai.starter.mcp.client", library("org.springframework.ai:spring-ai-starter-mcp-client", "1.0.1"))
            put("spring.ai.starter.mcp.client.webflux", library("org.springframework.ai:spring-ai-starter-mcp-client-webflux", "1.0.1"))
            put("spring.ai.starter.mcp.server", library("org.springframework.ai:spring-ai-starter-mcp-server", "1.0.1"))
            put("spring.ai.starter.mcp.server.webflux", library("org.springframework.ai:spring-ai-starter-mcp-server-webflux", "1.0.1"))
            put("spring.ai.starter.mcp.server.webmvc", library("org.springframework.ai:spring-ai-starter-mcp-server-webmvc", "1.0.1"))
            put("spring.ai.starter.model.chat.memory", library("org.springframework.ai:spring-ai-starter-model-chat-memory", "1.0.1"))
            put("spring.ai.starter.model.chat.memory.repository.cassandra", library("org.springframework.ai:spring-ai-starter-model-chat-memory-repository-cassandra", "1.0.1"))
            put("spring.ai.starter.model.chat.memory.repository.jdbc", library("org.springframework.ai:spring-ai-starter-model-chat-memory-repository-jdbc", "1.0.1"))
            put("spring.ai.starter.model.chat.memory.repository.neo4j", library("org.springframework.ai:spring-ai-starter-model-chat-memory-repository-neo4j", "1.0.1"))
            put("spring.ai.test", library("org.springframework.ai:spring-ai-test", "1.0.1"))
            put("spring.ai.spring.boot.docker.compose", library("org.springframework.ai:spring-ai-spring-boot-docker-compose", "1.0.1"))
            put("spring.ai.spring.boot.testcontainers", library("org.springframework.ai:spring-ai-spring-boot-testcontainers", "1.0.1"))
            put("sentry", library("io.sentry:sentry", "8.16.0"))
            put("sentry.android", library("io.sentry:sentry-android", "8.16.0"))
            put("sentry.android.core", library("io.sentry:sentry-android-core", "8.16.0"))
            put("sentry.android.fragment", library("io.sentry:sentry-android-fragment", "8.16.0"))
            put("sentry.android.navigation", library("io.sentry:sentry-android-navigation", "8.16.0"))
            put("sentry.android.ndk", library("io.sentry:sentry-android-ndk", "8.16.0"))
            put("sentry.android.replay", library("io.sentry:sentry-android-replay", "8.16.0"))
            put("sentry.android.sqlite", library("io.sentry:sentry-android-sqlite", "8.16.0"))
            put("sentry.android.timber", library("io.sentry:sentry-android-timber", "8.16.0"))
            put("sentry.apache.http.client.5", library("io.sentry:sentry-apache-http-client-5", "8.16.0"))
            put("sentry.apollo", library("io.sentry:sentry-apollo", "8.16.0"))
            put("sentry.apollo.3", library("io.sentry:sentry-apollo-3", "8.16.0"))
            put("sentry.apollo.4", library("io.sentry:sentry-apollo-4", "8.16.0"))
            put("sentry.compose.android", library("io.sentry:sentry-compose-android", "8.16.0"))
            put("sentry.compose.desktop", library("io.sentry:sentry-compose-desktop", "8.16.0"))
            put("sentry.compose", library("io.sentry:sentry-compose", "8.16.0"))
            put("sentry.graphql", library("io.sentry:sentry-graphql", "8.16.0"))
            put("sentry.graphql.22", library("io.sentry:sentry-graphql-22", "8.16.0"))
            put("sentry.graphql.core", library("io.sentry:sentry-graphql-core", "8.16.0"))
            put("sentry.jdbc", library("io.sentry:sentry-jdbc", "8.16.0"))
            put("sentry.jul", library("io.sentry:sentry-jul", "8.16.0"))
            put("sentry.kotlin.extensions", library("io.sentry:sentry-kotlin-extensions", "8.16.0"))
            put("sentry.log4j2", library("io.sentry:sentry-log4j2", "8.16.0"))
            put("sentry.logback", library("io.sentry:sentry-logback", "8.16.0"))
            put("sentry.okhttp", library("io.sentry:sentry-okhttp", "8.16.0"))
            put("sentry.openfeign", library("io.sentry:sentry-openfeign", "8.16.0"))
            put("sentry.quartz", library("io.sentry:sentry-quartz", "8.16.0"))
            put("sentry.reactor", library("io.sentry:sentry-reactor", "8.16.0"))
            put("sentry.servlet", library("io.sentry:sentry-servlet", "8.16.0"))
            put("sentry.servlet.jakarta", library("io.sentry:sentry-servlet-jakarta", "8.16.0"))
            put("sentry.spring", library("io.sentry:sentry-spring", "8.16.0"))
            put("sentry.spring.boot", library("io.sentry:sentry-spring-boot", "8.16.0"))
            put("sentry.spring.boot.jakarta", library("io.sentry:sentry-spring-boot-jakarta", "8.16.0"))
            put("sentry.spring.boot.starter", library("io.sentry:sentry-spring-boot-starter", "8.16.0"))
            put("sentry.spring.boot.starter.jakarta", library("io.sentry:sentry-spring-boot-starter-jakarta", "8.16.0"))
            put("sentry.spring.jakarta", library("io.sentry:sentry-spring-jakarta", "8.16.0"))
            put("sentry.opentelemetry.agent", library("io.sentry:sentry-opentelemetry-agent", "8.16.0"))
            put("sentry.opentelemetry.agentcustomization", library("io.sentry:sentry-opentelemetry-agentcustomization", "8.16.0"))
            put("sentry.opentelemetry.agentless", library("io.sentry:sentry-opentelemetry-agentless", "8.16.0"))
            put("sentry.opentelemetry.agentless.spring", library("io.sentry:sentry-opentelemetry-agentless-spring", "8.16.0"))
            put("sentry.opentelemetry.bootstrap", library("io.sentry:sentry-opentelemetry-bootstrap", "8.16.0"))
            put("sentry.opentelemetry.core", library("io.sentry:sentry-opentelemetry-core", "8.16.0"))
            put("spring.cloud.commons", library("org.springframework.cloud:spring-cloud-commons", "4.3.0"))
            put("spring.cloud.context", library("org.springframework.cloud:spring-cloud-context", "4.3.0"))
            put("spring.cloud.loadbalancer", library("org.springframework.cloud:spring-cloud-loadbalancer", "4.3.0"))
            put("spring.cloud.starter", library("org.springframework.cloud:spring-cloud-starter", "4.3.0"))
            put("spring.cloud.starter.bootstrap", library("org.springframework.cloud:spring-cloud-starter-bootstrap", "4.3.0"))
            put("spring.cloud.starter.loadbalancer", library("org.springframework.cloud:spring-cloud-starter-loadbalancer", "4.3.0"))
            put("spring.cloud.test.support", library("org.springframework.cloud:spring-cloud-test-support", "4.3.0"))
            put("okhttp.bom", library("com.squareup.okhttp3:okhttp-bom", "4.12.0"))
            put("spring.cloud.netflix.eureka.client", library("org.springframework.cloud:spring-cloud-netflix-eureka-client", "4.3.0"))
            put("spring.cloud.starter.netflix.eureka.client", library("org.springframework.cloud:spring-cloud-starter-netflix-eureka-client", "4.3.0"))
            put("spring.cloud.starter.netflix.eureka.server", library("org.springframework.cloud:spring-cloud-starter-netflix-eureka-server", "4.3.0"))
            put("spring.cloud.netflix.eureka.server", library("org.springframework.cloud:spring-cloud-netflix-eureka-server", "4.3.0"))
            put("eureka.client", library("com.netflix.eureka:eureka-client", "2.0.4"))
            put("eureka.core", library("com.netflix.eureka:eureka-core", "2.0.4"))
            put("eureka.core.jersey3", library("com.netflix.eureka:eureka-core-jersey3", "2.0.4"))
            put("eureka.client.jersey3", library("com.netflix.eureka:eureka-client-jersey3", "2.0.4"))
            put("spring.cloud.stream", library("org.springframework.cloud:spring-cloud-stream", "4.3.0"))
            put("spring.cloud.stream.test.binder", library("org.springframework.cloud:spring-cloud-stream-test-binder", "4.3.0"))
            put("spring.cloud.stream.test.support", library("org.springframework.cloud:spring-cloud-stream-test-support", "4.3.0"))
            put("spring.cloud.stream.binder.kafka", library("org.springframework.cloud:spring-cloud-stream-binder-kafka", "4.3.0"))
            put("spring.cloud.stream.binder.kafka.reactive", library("org.springframework.cloud:spring-cloud-stream-binder-kafka-reactive", "4.3.0"))
            put("spring.cloud.stream.binder.kafka.streams", library("org.springframework.cloud:spring-cloud-stream-binder-kafka-streams", "4.3.0"))
            put("spring.cloud.stream.binder.kafka.core", library("org.springframework.cloud:spring-cloud-stream-binder-kafka-core", "4.3.0"))
            put("spring.cloud.starter.stream.kafka", library("org.springframework.cloud:spring-cloud-starter-stream-kafka", "4.3.0"))
            put("spring.cloud.stream.binder.rabbit", library("org.springframework.cloud:spring-cloud-stream-binder-rabbit", "4.3.0"))
            put("spring.cloud.stream.binder.rabbit.core", library("org.springframework.cloud:spring-cloud-stream-binder-rabbit-core", "4.3.0"))
            put("spring.cloud.starter.stream.rabbit", library("org.springframework.cloud:spring-cloud-starter-stream-rabbit", "4.3.0"))
            put("spring.cloud.stream.binder.rabbit.test.support", library("org.springframework.cloud:spring-cloud-stream-binder-rabbit-test-support", "4.3.0"))
            put("spring.cloud.stream.binder.pulsar", library("org.springframework.cloud:spring-cloud-stream-binder-pulsar", "4.3.0"))
            put("spring.cloud.stream.schema.registry.client", library("org.springframework.cloud:spring-cloud-stream-schema-registry-client", "4.3.0"))
            put("spring.cloud.stream.schema.registry.core", library("org.springframework.cloud:spring-cloud-stream-schema-registry-core", "4.3.0"))
            put("spring.cloud.stream.schema.registry.server", library("org.springframework.cloud:spring-cloud-stream-schema-registry-server", "4.3.0"))
            put("spring.cloud.starter.task", library("org.springframework.cloud:spring-cloud-starter-task", "3.3.0"))
            put("spring.cloud.task.core", library("org.springframework.cloud:spring-cloud-task-core", "3.3.0"))
            put("spring.cloud.task.batch", library("org.springframework.cloud:spring-cloud-task-batch", "3.3.0"))
            put("spring.cloud.task.stream", library("org.springframework.cloud:spring-cloud-task-stream", "3.3.0"))
            put("resilience4j.bom", library("io.github.resilience4j:resilience4j-bom", "2.2.0"))
            put("spring.cloud.circuitbreaker.resilience4j", library("org.springframework.cloud:spring-cloud-circuitbreaker-resilience4j", "3.3.0"))
            put("spring.cloud.circuitbreaker.spring.retry", library("org.springframework.cloud:spring-cloud-circuitbreaker-spring-retry", "3.3.0"))
            put("spring.cloud.starter.circuitbreaker.spring.retry", library("org.springframework.cloud:spring-cloud-starter-circuitbreaker-spring-retry", "3.3.0"))
            put("spring.cloud.starter.circuitbreaker.resilience4j", library("org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j", "3.3.0"))
            put("spring.cloud.starter.circuitbreaker.reactor.resilience4j", library("org.springframework.cloud:spring-cloud-starter-circuitbreaker-reactor-resilience4j", "3.3.0"))
            put("spring.cloud.starter.config", library("org.springframework.cloud:spring-cloud-starter-config", "4.3.0"))
            put("spring.cloud.config.client", library("org.springframework.cloud:spring-cloud-config-client", "4.3.0"))
            put("spring.cloud.config.server", library("org.springframework.cloud:spring-cloud-config-server", "4.3.0"))
            put("spring.cloud.config.monitor", library("org.springframework.cloud:spring-cloud-config-monitor", "4.3.0"))
            put("spring.vault.core", library("org.springframework.vault:spring-vault-core", "3.2.0"))
            put("spring.credhub.core", library("org.springframework.credhub:spring-credhub-core", "2.1.1.RELEASE"))
            put("org.eclipse.jgit", library("org.eclipse.jgit:org.eclipse.jgit", "6.10.1.202505221210-r"))
            put("org.eclipse.jgit.junit.http", library("org.eclipse.jgit:org.eclipse.jgit.junit.http", "6.10.1.202505221210-r"))
            put("org.eclipse.jgit.http.apache", library("org.eclipse.jgit:org.eclipse.jgit.http.apache", "6.10.1.202505221210-r"))
            put("org.eclipse.jgit.ssh.apache", library("org.eclipse.jgit:org.eclipse.jgit.ssh.apache", "6.10.1.202505221210-r"))
            put("svnkit", library("org.tmatesoft.svnkit:svnkit", "1.10.11"))
            put("spring.cloud.function.context", library("org.springframework.cloud:spring-cloud-function-context", "4.3.0"))
            put("spring.cloud.function.core", library("org.springframework.cloud:spring-cloud-function-core", "4.3.0"))
            put("spring.cloud.function.web", library("org.springframework.cloud:spring-cloud-function-web", "4.3.0"))
            put("spring.cloud.starter.function.web", library("org.springframework.cloud:spring-cloud-starter-function-web", "4.3.0"))
            put("spring.cloud.starter.function.webflux", library("org.springframework.cloud:spring-cloud-starter-function-webflux", "4.3.0"))
            put("spring.cloud.function.deployer", library("org.springframework.cloud:spring-cloud-function-deployer", "4.3.0"))
            put("spring.cloud.function.adapter.aws", library("org.springframework.cloud:spring-cloud-function-adapter-aws", "4.3.0"))
            put("spring.cloud.function.adapter.azure", library("org.springframework.cloud:spring-cloud-function-adapter-azure", "4.3.0"))
            put("spring.cloud.function.adapter.azure.web", library("org.springframework.cloud:spring-cloud-function-adapter-azure-web", "4.3.0"))
            put("spring.cloud.function.adapter.gcp", library("org.springframework.cloud:spring-cloud-function-adapter-gcp", "4.3.0"))
            put("spring.cloud.function.integration", library("org.springframework.cloud:spring-cloud-function-integration", "4.3.0"))
            put("spring.cloud.function.kotlin", library("org.springframework.cloud:spring-cloud-function-kotlin", "4.3.0"))
            put("spring.cloud.function.rsocket", library("org.springframework.cloud:spring-cloud-function-rsocket", "4.3.0"))
            put("spring.cloud.function.grpc", library("org.springframework.cloud:spring-cloud-function-grpc", "4.3.0"))
            put("spring.cloud.function.grpc.cloudevent.ext", library("org.springframework.cloud:spring-cloud-function-grpc-cloudevent-ext", "4.3.0"))
            put("spring.cloud.function.serverless.web", library("org.springframework.cloud:spring-cloud-function-serverless-web", "4.3.0"))
            put("spring.cloud.gateway.webflux", library("org.springframework.cloud:spring-cloud-gateway-webflux", "4.3.0"))
            put("spring.cloud.gateway.mvc", library("org.springframework.cloud:spring-cloud-gateway-mvc", "4.3.0"))
            put("spring.cloud.gateway.server", library("org.springframework.cloud:spring-cloud-gateway-server", "4.3.0"))
            put("spring.cloud.gateway.server.mvc", library("org.springframework.cloud:spring-cloud-gateway-server-mvc", "4.3.0"))
            put("spring.cloud.gateway.proxyexchange.webflux", library("org.springframework.cloud:spring-cloud-gateway-proxyexchange-webflux", "4.3.0"))
            put("spring.cloud.gateway.proxyexchange.webmvc", library("org.springframework.cloud:spring-cloud-gateway-proxyexchange-webmvc", "4.3.0"))
            put("spring.cloud.gateway.server.webflux", library("org.springframework.cloud:spring-cloud-gateway-server-webflux", "4.3.0"))
            put("spring.cloud.gateway.server.webmvc", library("org.springframework.cloud:spring-cloud-gateway-server-webmvc", "4.3.0"))
            put("spring.cloud.starter.gateway.server.webflux", library("org.springframework.cloud:spring-cloud-starter-gateway-server-webflux", "4.3.0"))
            put("spring.cloud.starter.gateway.server.webmvc", library("org.springframework.cloud:spring-cloud-starter-gateway-server-webmvc", "4.3.0"))
            put("spring.cloud.starter.gateway", library("org.springframework.cloud:spring-cloud-starter-gateway", "4.3.0"))
            put("spring.cloud.starter.gateway.mvc", library("org.springframework.cloud:spring-cloud-starter-gateway-mvc", "4.3.0"))
            put("spring.cloud.consul.core", library("org.springframework.cloud:spring-cloud-consul-core", "4.3.0"))
            put("spring.cloud.consul.binder", library("org.springframework.cloud:spring-cloud-consul-binder", "4.3.0"))
            put("spring.cloud.consul.config", library("org.springframework.cloud:spring-cloud-consul-config", "4.3.0"))
            put("spring.cloud.consul.discovery", library("org.springframework.cloud:spring-cloud-consul-discovery", "4.3.0"))
            put("spring.cloud.starter.consul", library("org.springframework.cloud:spring-cloud-starter-consul", "4.3.0"))
            put("spring.cloud.starter.consul.bus", library("org.springframework.cloud:spring-cloud-starter-consul-bus", "4.3.0"))
            put("spring.cloud.starter.consul.config", library("org.springframework.cloud:spring-cloud-starter-consul-config", "4.3.0"))
            put("spring.cloud.starter.consul.discovery", library("org.springframework.cloud:spring-cloud-starter-consul-discovery", "4.3.0"))
            put("spring.cloud.starter.consul.all", library("org.springframework.cloud:spring-cloud-starter-consul-all", "4.3.0"))
            put("consul.api", library("com.ecwid.consul:consul-api", "1.4.5"))
            put("spring.cloud.vault.config", library("org.springframework.cloud:spring-cloud-vault-config", "4.3.0"))
            put("spring.cloud.vault.config.aws", library("org.springframework.cloud:spring-cloud-vault-config-aws", "4.3.0"))
            put("spring.cloud.vault.config.consul", library("org.springframework.cloud:spring-cloud-vault-config-consul", "4.3.0"))
            put("spring.cloud.vault.config.databases", library("org.springframework.cloud:spring-cloud-vault-config-databases", "4.3.0"))
            put("spring.cloud.vault.config.rabbitmq", library("org.springframework.cloud:spring-cloud-vault-config-rabbitmq", "4.3.0"))
            put("spring.cloud.starter.vault.config", library("org.springframework.cloud:spring-cloud-starter-vault-config", "4.3.0"))
            put("spring.cloud.zookeeper.core", library("org.springframework.cloud:spring-cloud-zookeeper-core", "4.3.0"))
            put("spring.cloud.zookeeper.config", library("org.springframework.cloud:spring-cloud-zookeeper-config", "4.3.0"))
            put("spring.cloud.zookeeper.discovery", library("org.springframework.cloud:spring-cloud-zookeeper-discovery", "4.3.0"))
            put("spring.cloud.starter.zookeeper", library("org.springframework.cloud:spring-cloud-starter-zookeeper", "4.3.0"))
            put("spring.cloud.starter.zookeeper.all", library("org.springframework.cloud:spring-cloud-starter-zookeeper-all", "4.3.0"))
            put("spring.cloud.starter.zookeeper.config", library("org.springframework.cloud:spring-cloud-starter-zookeeper-config", "4.3.0"))
            put("spring.cloud.starter.zookeeper.discovery", library("org.springframework.cloud:spring-cloud-starter-zookeeper-discovery", "4.3.0"))
            put("curator.framework", library("org.apache.curator:curator-framework", "5.8.0"))
            put("curator.recipes", library("org.apache.curator:curator-recipes", "5.8.0"))
            put("curator.x.discovery", library("org.apache.curator:curator-x-discovery", "5.8.0"))
            put("curator.test", library("org.apache.curator:curator-test", "5.8.0"))
            put("spring.cloud.starter.bus.amqp", library("org.springframework.cloud:spring-cloud-starter-bus-amqp", "4.3.0"))
            put("spring.cloud.starter.bus.kafka", library("org.springframework.cloud:spring-cloud-starter-bus-kafka", "4.3.0"))
            put("spring.cloud.starter.bus.stream", library("org.springframework.cloud:spring-cloud-starter-bus-stream", "4.3.0"))
            put("spring.cloud.bus", library("org.springframework.cloud:spring-cloud-bus", "4.3.0"))
            put("spring.cloud.bus.rsocket", library("org.springframework.cloud:spring-cloud-bus-rsocket", "4.3.0"))
            put("spring.cloud.contract.wiremock", library("org.springframework.cloud:spring-cloud-contract-wiremock", "4.3.0"))
            put("spring.cloud.contract.spec", library("org.springframework.cloud:spring-cloud-contract-spec", "4.3.0"))
            put("spring.cloud.contract.spec.java", library("org.springframework.cloud:spring-cloud-contract-spec-java", "4.3.0"))
            put("spring.cloud.contract.spec.groovy", library("org.springframework.cloud:spring-cloud-contract-spec-groovy", "4.3.0"))
            put("spring.cloud.contract.spec.kotlin", library("org.springframework.cloud:spring-cloud-contract-spec-kotlin", "4.3.0"))
            put("spring.cloud.contract.verifier", library("org.springframework.cloud:spring-cloud-contract-verifier", "4.3.0"))
            put("spring.cloud.contract.converters", library("org.springframework.cloud:spring-cloud-contract-converters", "4.3.0"))
            put("spring.cloud.contract.stub.runner", library("org.springframework.cloud:spring-cloud-contract-stub-runner", "4.3.0"))
            put("spring.cloud.contract.stub.runner.boot", library("org.springframework.cloud:spring-cloud-contract-stub-runner-boot", "4.3.0"))
            put("spring.cloud.contract.shade", library("org.springframework.cloud:spring-cloud-contract-shade", "4.3.0"))
            put("spring.cloud.starter.contract.verifier", library("org.springframework.cloud:spring-cloud-starter-contract-verifier", "4.3.0"))
            put("spring.cloud.starter.contract.stub.runner", library("org.springframework.cloud:spring-cloud-starter-contract-stub-runner", "4.3.0"))
            put("spring.cloud.starter.contract.stub.runner.jetty", library("org.springframework.cloud:spring-cloud-starter-contract-stub-runner-jetty", "4.3.0"))
            put("spring.cloud.contract.maven.plugin", library("org.springframework.cloud:spring-cloud-contract-maven-plugin", "4.3.0"))
            put("spring.cloud.contract.gradle.plugin", library("org.springframework.cloud:spring-cloud-contract-gradle-plugin", "4.3.0"))
            put("wiremock.jre8.standalone", library("com.github.tomakehurst:wiremock-jre8-standalone", "2.35.1"))
            put("toomuchcoding.jsonassert", library("com.toomuchcoding.jsonassert:jsonassert", "0.8.0"))
            put("toomuchcoding.jsonassert.shade", library("com.toomuchcoding.jsonassert:jsonassert-shade", "0.8.0"))
            put("spring.cloud.openfeign.core", library("org.springframework.cloud:spring-cloud-openfeign-core", "4.3.0"))
            put("spring.cloud.starter.openfeign", library("org.springframework.cloud:spring-cloud-starter-openfeign", "4.3.0"))
            put("feign.bom", library("io.github.openfeign:feign-bom", "13.6"))
            put("fabric8.kubernetes.client.bom", library("io.fabric8:kubernetes-client-bom", "7.3.1"))
            put("kubernetes.client.java", library("io.kubernetes:client-java", "19.0.2"))
            put("kubernetes.client.java.extended", library("io.kubernetes:client-java-extended", "19.0.2"))
            put("kubernetes.client.java.spring.integration", library("io.kubernetes:client-java-spring-integration", "19.0.2"))
            put("spring.cloud.kubernetes.fabric8.autoconfig", library("org.springframework.cloud:spring-cloud-kubernetes-fabric8-autoconfig", "3.3.0"))
            put("spring.cloud.kubernetes.fabric8.config", library("org.springframework.cloud:spring-cloud-kubernetes-fabric8-config", "3.3.0"))
            put("spring.cloud.kubernetes.client.config", library("org.springframework.cloud:spring-cloud-kubernetes-client-config", "3.3.0"))
            put("spring.cloud.kubernetes.client.discovery", library("org.springframework.cloud:spring-cloud-kubernetes-client-discovery", "3.3.0"))
            put("spring.cloud.kubernetes.fabric8.discovery", library("org.springframework.cloud:spring-cloud-kubernetes-fabric8-discovery", "3.3.0"))
            put("spring.cloud.kubernetes.fabric8.istio", library("org.springframework.cloud:spring-cloud-kubernetes-fabric8-istio", "3.3.0"))
            put("spring.cloud.kubernetes.fabric8.leader", library("org.springframework.cloud:spring-cloud-kubernetes-fabric8-leader", "3.3.0"))
            put("spring.cloud.kubernetes.commons", library("org.springframework.cloud:spring-cloud-kubernetes-commons", "3.3.0"))
            put("spring.cloud.kubernetes.client.autoconfig", library("org.springframework.cloud:spring-cloud-kubernetes-client-autoconfig", "3.3.0"))
            put("spring.cloud.kubernetes.fabric8.loadbalancer", library("org.springframework.cloud:spring-cloud-kubernetes-fabric8-loadbalancer", "3.3.0"))
            put("spring.cloud.kubernetes.client.loadbalancer", library("org.springframework.cloud:spring-cloud-kubernetes-client-loadbalancer", "3.3.0"))
            put("spring.cloud.kubernetes.discovery", library("org.springframework.cloud:spring-cloud-kubernetes-discovery", "3.3.0"))
            put("spring.cloud.starter.kubernetes.fabric8", library("org.springframework.cloud:spring-cloud-starter-kubernetes-fabric8", "3.3.0"))
            put("spring.cloud.starter.kubernetes.client", library("org.springframework.cloud:spring-cloud-starter-kubernetes-client", "3.3.0"))
            put("spring.cloud.starter.kubernetes.fabric8.config", library("org.springframework.cloud:spring-cloud-starter-kubernetes-fabric8-config", "3.3.0"))
            put("spring.cloud.starter.kubernetes.client.config", library("org.springframework.cloud:spring-cloud-starter-kubernetes-client-config", "3.3.0"))
            put("spring.cloud.starter.kubernetes.fabric8.loadbalancer", library("org.springframework.cloud:spring-cloud-starter-kubernetes-fabric8-loadbalancer", "3.3.0"))
            put("spring.cloud.starter.kubernetes.client.loadbalancer", library("org.springframework.cloud:spring-cloud-starter-kubernetes-client-loadbalancer", "3.3.0"))
            put("spring.cloud.starter.kubernetes.fabric8.all", library("org.springframework.cloud:spring-cloud-starter-kubernetes-fabric8-all", "3.3.0"))
            put("spring.cloud.starter.kubernetes.client.all", library("org.springframework.cloud:spring-cloud-starter-kubernetes-client-all", "3.3.0"))
            put("spring.cloud.starter.kubernetes.discoveryclient", library("org.springframework.cloud:spring-cloud-starter-kubernetes-discoveryclient", "3.3.0"))
            put("wiremock.standalone", library("org.wiremock:wiremock-standalone", "3.9.2"))
            put("spring.cloud.kubernetes.test.support", library("org.springframework.cloud:spring-cloud-kubernetes-test-support", "3.3.0"))
            put("spring.security.acl", library("org.springframework.security:spring-security-acl", "6.4.3"))
            put("spring.security.aspects", library("org.springframework.security:spring-security-aspects", "6.4.3"))
            put("spring.security.cas", library("org.springframework.security:spring-security-cas", "6.4.3"))
            put("spring.security.config", library("org.springframework.security:spring-security-config", "6.4.3"))
            put("spring.security.core", library("org.springframework.security:spring-security-core", "6.4.3"))
            put("spring.security.crypto", library("org.springframework.security:spring-security-crypto", "6.4.3"))
            put("spring.security.data", library("org.springframework.security:spring-security-data", "6.4.3"))
            put("spring.security.ldap", library("org.springframework.security:spring-security-ldap", "6.4.3"))
            put("spring.security.messaging", library("org.springframework.security:spring-security-messaging", "6.4.3"))
            put("spring.security.oauth2.client", library("org.springframework.security:spring-security-oauth2-client", "6.4.3"))
            put("spring.security.oauth2.core", library("org.springframework.security:spring-security-oauth2-core", "6.4.3"))
            put("spring.security.oauth2.jose", library("org.springframework.security:spring-security-oauth2-jose", "6.4.3"))
            put("spring.security.oauth2.resource.server", library("org.springframework.security:spring-security-oauth2-resource-server", "6.4.3"))
            put("spring.security.rsocket", library("org.springframework.security:spring-security-rsocket", "6.4.3"))
            put("spring.security.saml2.service.provider", library("org.springframework.security:spring-security-saml2-service-provider", "6.4.3"))
            put("spring.security.taglibs", library("org.springframework.security:spring-security-taglibs", "6.4.3"))
            put("spring.security.test", library("org.springframework.security:spring-security-test", "6.4.3"))
            put("spring.security.web", library("org.springframework.security:spring-security-web", "6.4.3"))
        }
        // @formatter:on
    }
}

context(catalog: VersionCatalog)
private fun library(groupAndModule: String, version: TraceableString): TraceableString =
    TraceableString(
        value = "$groupAndModule:${version.value}",
        trace = BuiltinCatalogTrace(catalog, computedValueTrace = version),
    )

context(catalog: VersionCatalog)
private fun library(groupAndModule: String, version: String): TraceableString =
    TraceableString("$groupAndModule:$version", trace = BuiltinCatalogTrace(catalog))

context(catalog: VersionCatalog)
private fun library(groupAndModule: String): TraceableString =
    TraceableString(groupAndModule, trace = BuiltinCatalogTrace(catalog))

private fun materialIconsVersion(composeVersion: TraceableString) =
    when {
        ComparableVersion(composeVersion.value) >= ComparableVersion("1.8.0") ->
            TraceableString("1.7.3", DefaultTrace(computedValueTrace = composeVersion))
        else -> composeVersion
    }
