Module
------
	aliases: Map<String, Set<Platform>> - Defines the names for the custom code sharing groups. [Read more](#aliases)
	apply: List<Path> - Lists the templates applied to the module. [Read more](#templates)
	module: Meta - Configures various aspects of the module, such as file layout
	product: ModuleProduct - Defines what should be produced out of the module. Read more about the [product types](#product-types)
	dependencies[@modifier]: List<Dependency> - The list of modules and libraries necessary to build the Module. [Read more](#dependencies)
	repositories: List<Repository> - The list of repositories used to look up and download the Module dependencies. [Read more](#managing-maven-repositories)
	settings[@modifier]: Settings - Configures the toolchains used in the build process. [Read more](#settings)
	tasks: Map<String, TaskSettings> - Tasks settings. Experimental and will be replaced
	test-dependencies[@modifier]: List<Dependency> - The dependencies necessary to build and run tests of the Module. [Read more](#dependencies)
	test-settings[@modifier]: Settings - Configures the toolchains used in the build process of the module's tests. [Read more](#settings)

Meta
----
	layout: AmperLayout, default: default - File layout of the module. [Read more](#file-layout-with-gradle-interoperability)

ModuleProduct: Defines what should be produced out of the module. [Read more](#product-types)
---------------------------------------------------------------------------------------------
	platforms: List<Platform> - What platforms to generate the product for
	type: ProductType - What type of product to generate

CatalogBomDependency
--------------------
	catalogKey: String - BOM dependency from [a dependency catalog](#dependencyversion-catalogs)

ExternalMavenBomDependency
--------------------------
	coordinates: String - Dependency on [a BOM](#external-maven-dependencies) in a Maven repository

CatalogDependency
-----------------
	catalogKey: String - Dependency from [a dependency catalog](#dependencyversion-catalogs)
	exported: Boolean, default: false - Whether a dependency should be [visible as a part of a published API](#scopes-and-visibility)
	scope: DependencyScope, default: all - When the dependency should be used. Read more about the [dependency scopes](#scopes-and-visibility)

ExternalMavenDependency
-----------------------
	coordinates: String - Dependency on [a Kotlin or Java library](#external-maven-dependencies) in a Maven repository
	exported: Boolean, default: false - Whether a dependency should be [visible as a part of a published API](#scopes-and-visibility)
	scope: DependencyScope, default: all - When the dependency should be used. Read more about the [dependency scopes](#scopes-and-visibility)

InternalDependency
------------------
	path: Path - Dependency [on another module](#module-dependencies) in the codebase
	exported: Boolean, default: false - Whether a dependency should be [visible as a part of a published API](#scopes-and-visibility)
	scope: DependencyScope, default: all - When the dependency should be used. Read more about the [dependency scopes](#scopes-and-visibility)

Repository
----------
	credentials: Credentials - Credentials for the authenticated repositories
	id: String - The ID of the repository, used for to reference it. Defaults to the repository url
	publish: Boolean, default: false - Whether this repository can be used to publish artifacts
	resolve: Boolean, default: true - Whether this repository can be used to resolve artifacts
	url: String - The url of the repository

Credentials
-----------
	file: Path - A relative path to a file with the credentials. Currently, only `*.property` files are supported
	passwordKey: String - A key in the file that holds the password
	usernameKey: String - A key in the file that holds the username

Settings
--------
	android: AndroidSettings - Android toolchain and platform settings
	compose: ComposeSettings - [Compose Multiplatform](https://www.jetbrains.com/lp/compose-multiplatform/) framework.Read more about [Compose configuration](#configuring-compose-multiplatform)
	ios: IosSettings - iOS toolchain and platform settings
	junit: JUnitVersion, default: junit-5 - JUnit test runner on the JVM and Android platforms. Read more about [testing support](#tests)
	jvm: JvmSettings - JVM platform-specific settings
	kotlin: KotlinSettings - Kotlin language and the compiler settings
	kover: KoverSettings - Kover settings for code coverage. Read more [about Kover](https://kotlin.github.io/kotlinx-kover/gradle-plugin/)
	ktor: KtorSettings - Ktor server settings
	native: NativeSettings - Native applications settings
	publishing: PublishingSettings - Publishing settings
	springBoot: SpringBootSettings - Spring Boot settings

AndroidSettings
---------------
	applicationId: String - The ID for the application on a device and in the Google Play Store. [Read more](https://developer.android.com/build/configure-app-module#set-namespace)
	compileSdk: AndroidVersion, default: 35 - The API level to compile the code. The code can use only the Android APIs up to that API level. [Read more](https://developer.android.com/reference/tools/gradle-api/com/android/build/api/dsl/CommonExtension#compileSdk())
	maxSdk: AndroidVersion - Maximum API level on which the application can run. [Read more](https://developer.android.com/guide/topics/manifest/uses-sdk-element.html)
	minSdk: AndroidVersion, default: 21 - Minimum API level needed to run the application. [Read more](https://developer.android.com/guide/topics/manifest/uses-sdk-element.html)
	namespace: String, default: org.example.namespace - A Kotlin or Java package name for the generated `R` and `BuildConfig` classes. [Read more](https://developer.android.com/build/configure-app-module#set-namespace)
	parcelize: ParcelizeSettings - Configure [Kotlin Parcelize](https://developer.android.com/kotlin/parcelize) to automatically implement the `Parcelable` interface for classes annotated with `@Parcelize`.
	resourcePackaging: AndroidJavaResourcesPackagingSettings - Packaging options for java resource files.
	signing: AndroidSigningSettings - Application signing settings. [Read more](https://developer.android.com/studio/publish/app-signing)
	targetSdk: AndroidVersion - The target API level for the application. [Read more](https://developer.android.com/guide/topics/manifest/uses-sdk-element.html)
	versionCode: Int, default: 1 - Version code. [Read more](https://developer.android.com/studio/publish/versioning#versioningsettings)
	versionName: String, default: unspecified - Version name. [Read more](https://developer.android.com/studio/publish/versioning#versioningsettings)

ParcelizeSettings
-----------------
	additionalAnnotations: List<String>, default: [] - The full-qualified name of additional annotations that should be considered as `@Parcelize`. This is useful if you need to annotate classes in common code shared between different platforms, where the real `@Parcelize` annotation is not available. In that case, create your own common annotation and add its fully-qualified name here so that Parcelize recognizes it.
	enabled: Boolean, default: false - Whether to enable [Parcelize](https://developer.android.com/kotlin/parcelize). When enabled, an implementation of the `Parcelable` interface is automatically generated for classes annotated with `@Parcelize`.

AndroidJavaResourcesPackagingSettings
-------------------------------------
	excludes: List<String>, default: [] - The set of excluded patterns. Java resources matching any of these patterns do not get packaged in the APK.<br>Example: '**/*.md', 'META-INF/LICENSE.txt', etc.
	merges: List<String>, default: [] - The set of patterns for which matching java resources are merged. For each java resource APK entry path matching one of these patterns, all java resources with that path are concatenated and packaged as a single entry in the APK.<br>Example: '**/*.properties', 'META-INF/NOTICE.md', etc.
	pickFirsts: List<String>, default: [] - The set of patterns for which the first occurrence is packaged in the APK. For each java resource APK entry path matching one of these patterns, only the first java resource found with that path gets packaged in the APK.<br>Example: '**/*.version', 'META-INF/*.kotlin_module', etc.

AndroidSigningSettings
----------------------
	enabled: Boolean, default: false - Enable signing with keystore
	propertiesFile: Path - Properties file where the keystore data is stored.

ComposeSettings
---------------
	enabled: Boolean, default: false - Enable Compose runtime, dependencies and the compiler plugins
	experimental: ComposeExperimentalSettings - Experimental Compose settings
	resources: ComposeResourcesSettings - Compose Resources settings
	version: String - The Compose plugin version

ComposeExperimentalSettings
---------------------------
	hotReload: ComposeExperimentalHotReloadSettings - Experimental Compose hot-reload settings

ComposeExperimentalHotReloadSettings
------------------------------------
	enabled: Boolean, default: false - Enable hot reload

ComposeResourcesSettings
------------------------
	exposedAccessors: Boolean, default: false - Whether the generated resources accessors should be exposed to other modules (public) or internal.
	packageName: String, default:  - A unique identifier for the resources in the current module.<br>Used as package for the generated Res class and for isolating resources in the final artifact.

IosSettings
-----------
	framework: IosFrameworkSettings - (Only for the library [product type](#product-types) Configure the generated framework to [share the common code with an Xcode project](https://kotlinlang.org/docs/multiplatform-mobile-understand-project-structure.html#ios-framework)
	teamId: String - A Team ID is a unique string assigned to your team by Apple.<br>It's necessary if you want to run/test on a Apple device.<br>Read [how to locate your team ID in Xcode](https://developer.apple.com/help/account/manage-your-team/locate-your-team-id/), or use [KDoctor tool](https://github.com/Kotlin/kdoctor) (`kdoctor --team-ids`)

IosFrameworkSettings
--------------------
	basename: String, default: kotlin - The name of the generated framework
	isStatic: Boolean, default: false - Whether to create a dynamically linked or statically linked framework

JvmSettings
-----------
	mainClass: String - (Only for `jvm/app` [product type](#product-types)). The fully-qualified name of the class used to run the application
	release: JavaVersion, default: 17 - The minimum JVM release version that the code should be compatible with. This enforces compatibility on 3 levels. First, it is used as the target version for the bytecode generated from Kotlin and Java sources. Second, it limits the Java platform APIs available to Kotlin and Java sources. Third, it limits the Java language constructs in Java sources. If this is set to null, these constraints are not applied and the compiler defaults are used.
	storeParameterNames: Boolean, default: false - Enables storing formal parameter names of constructors and methods in the generated class files. These can later be accessed using reflection.
	test: JvmTestSettings - JVM test-specific settings

JvmTestSettings
---------------
	freeJvmArgs: List<String>, default: [] - Pass any JVM command line arguments to the test process.
	systemProperties: Map<String, String>, default: {} - Pass JVM system properties to set for the test process.

KotlinSettings
--------------
	allOpen: AllOpenSettings - Configure [Kotlin all-open compiler plugin](https://kotlinlang.org/docs/all-open-plugin.html)
	allWarningsAsErrors: Boolean, default: false - Turn any warnings into a compilation error
	apiVersion: KotlinVersion - Allow using declarations only from the specified version of Kotlin bundled libraries
	debug: Boolean - (Only for [native targets](https://kotlinlang.org/docs/native-target-support.html)) Enable emitting debug information. Enabled in debug variants by default.
	freeCompilerArgs: List<String> - Pass any [compiler option](https://kotlinlang.org/docs/compiler-reference.html#compiler-options) directly
	ksp: KspSettings - [KSP (Kotlin Symbol Processing)](https://github.com/google/ksp) settings.
	languageFeatures: List<String>
	languageVersion: KotlinVersion, default: 2.1 - Source compatibility with the specified version of Kotlin
	linkerOpts: List<String>
	noArg: NoArgSettings - Configure [Kotlin no-arg compiler plugin](https://kotlinlang.org/docs/no-arg-plugin.html)
	optIns: List<String> - Usages of API that [requires opt-in](https://kotlinlang.org/docs/opt-in-requirements.html) with a requirement annotation with the given fully qualified name
	optimization: Boolean - (Only for [native targets](https://kotlinlang.org/docs/native-target-support.html)) Enable compilation optimizations and produce a binary with better runtime performance. Enabled in release variants by default.
	progressiveMode: Boolean, default: false - Enable the [progressive mode for the compiler](https://kotlinlang.org/docs/compiler-reference.html#progressive)
	serialization: SerializationSettings - Configure [Kotlin serialization](https://github.com/Kotlin/kotlinx.serialization)
	suppressWarnings: Boolean, default: false - Suppress the compiler from displaying warnings during compilation
	verbose: Boolean, default: false - Enable verbose logging output which includes details of the compilation process

AllOpenSettings
---------------
	annotations: List<String> - List of annotations that trigger open class/method generation. Classes/methods annotated with these annotations will be automatically made open.
	enabled: Boolean, default: false - Enable the Kotlin all-open compiler plugin
	presets: List<AllOpenPreset> - Predefined sets of annotations for common frameworks. Each preset automatically includes annotations specific to that framework.

KspSettings
-----------
	processorOptions: Map<String, String>, default: {} - Some options to pass to KSP processors. Refer to each processor documentation for details.
	processors: List<KspProcessorDeclaration>, default: [] - The list of KSP processors to use. Each item can be a path to a local module, a catalog reference, or maven coordinates.
	version: String, default: 2.1.21-2.0.1 - The version of KSP to use

NoArgSettings
-------------
	annotations: List<String> - List of annotations that trigger no-arg constructor generation. Classes annotated with these annotations will have a no-arg constructor generated.
	enabled: Boolean, default: false - Enable the Kotlin no-arg compiler plugin
	invokeInitializers: Boolean, default: false - Whether to call initializers in the synthesized constructor. By default, initializers are not called.
	presets: List<NoArgPreset> - Predefined sets of annotations. Currently only 'jpa' preset is supported, which automatically includes JPA entity annotations.

SerializationSettings
---------------------
	enabled: Boolean - Enables the kotlinx.serialization compiler plugin, which generates code based on @Serializable annotations. This also automatically adds the kotlinx-serialization-core library to provide the annotations and facilities for serialization, but no specific serialization format.
	format: String, default: null - The [kotlinx.serialization format](https://github.com/Kotlin/kotlinx.serialization/blob/master/formats/README.md) to use, such as `json`. When set, the corresponding `kotlinx-serialization-<format>` library is automatically added to dependencies. When null, no format dependency is automatically added. Prefer using the built-in catalog dependencies for this, as it gives control over the 'scope' and 'exported' properties.
	version: String, default: 1.8.0 - The version of the kotlinx.serialization core and format libraries to use.

KoverSettings
-------------
	enabled: Boolean, default: false - Enable code overage with Kover
	html: KoverHtmlSettings
	xml: KoverXmlSettings

KoverHtmlSettings
-----------------
	charset: String
	onCheck: Boolean
	reportDir: Path
	title: String

KoverXmlSettings
----------------
	onCheck: Boolean
	reportFile: Path

KtorSettings
------------
	enabled: Boolean, default: false - Enable Ktor server
	version: String, default: 3.1.1 - Ktor version

NativeSettings
--------------
	entryPoint: String - The fully-qualified name of the application's entry point function

PublishingSettings
------------------
	group: String - Group ID of the published Maven artifact
	name: String - Artifact ID of the published Maven artifact
	version: String - Version of the published Maven artifact

SpringBootSettings
------------------
	enabled: Boolean, default: false - Enable Spring Boot
	version: String, default: 3.4.3 - Spring Boot version

TaskSettings
------------
	dependsOn: List<String> - Adds to task dependencies

