/*
 * Copyright 2000-2025 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.
 */

package org.jetbrains.amper.tasks.custom

import org.jetbrains.amper.engine.TaskGraphExecutionContext
import org.jetbrains.amper.frontend.Fragment
import org.jetbrains.amper.frontend.TaskName
import org.jetbrains.amper.frontend.plugins.TaskFromPluginDescription
import org.jetbrains.amper.frontend.plugins.generated.ShadowSourcesKind
import org.jetbrains.amper.tasks.EmptyTaskResult
import org.jetbrains.amper.tasks.TaskResult
import org.jetbrains.amper.tasks.artifacts.ArtifactTaskBase
import org.jetbrains.amper.tasks.artifacts.JvmResourcesDirArtifact
import org.jetbrains.amper.tasks.artifacts.KotlinJavaSourceDirArtifact
import org.jetbrains.amper.tasks.artifacts.api.ArtifactSelector
import org.jetbrains.amper.tasks.artifacts.api.ArtifactType
import org.jetbrains.amper.tasks.artifacts.api.Quantifier

/**
 * Simple aggregating task that resolves the
 * [org.jetbrains.amper.frontend.plugins.generated.ShadowModuleSources.sourceDirectories]
 * property.
 */
internal class ModuleSourcesResolveTask(
    override val taskName: TaskName,
    private val fragmentsForSources: List<Fragment>,
    private val request: TaskFromPluginDescription.ModuleSourcesRequest,
) : ArtifactTaskBase() {
    init {
        require(request.node.includeGenerated) { "includeGenerated must be true" }
    }

    private val generated by ArtifactSelector(
        type = ArtifactType(
            when (request.node.kind) {
                ShadowSourcesKind.KotlinJavaSources -> KotlinJavaSourceDirArtifact::class
                ShadowSourcesKind.Resources -> JvmResourcesDirArtifact::class
            }
        ),
        predicate = { it.fragment in fragmentsForSources },
        description = "generated JVM sources",
        quantifier = Quantifier.AnyOrNone,
    )

    override suspend fun run(
        dependenciesResult: List<TaskResult>,
        executionContext: TaskGraphExecutionContext
    ): TaskResult {
        request.node.sourceDirectories = buildList {
            fragmentsForSources.forEach {
                when(request.node.kind) {
                    ShadowSourcesKind.KotlinJavaSources -> addAll(it.sourceRoots)
                    ShadowSourcesKind.Resources -> add(it.resourcesPath)
                }
            }
            generated.forEach {
                add(it.path)
            }
        }

        return EmptyTaskResult
    }
}