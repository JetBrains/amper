schema.forbidden.context.receivers=Context parameters are not allowed in @Schema interfaces
schema.forbidden.function=Functions are not allowed in @Schema interfaces
schema.forbidden.generics=Generics are not allowed in @Schema interfaces
schema.forbidden.mixins=Superinterfaces for @Schema interfaces are not yet supported
schema.forbidden.property.defaults=Default getter implementations in @Schema interfaces are reserved for future use
schema.forbidden.property.enabled=`enabled` property name is reserved in the plugin's schema extension
schema.forbidden.property.extension=Extension properties are not allowed in @Schema interfaces
schema.forbidden.property.mutable=Mutable properties are not allowed in @Schema interfaces
schema.forbidden.property.override=Overriding properties is not supported in @Schema interfaces
schema.forbidden.task.action.context.receivers=Context parameters are not allowed in @TaskAction function
schema.forbidden.task.action.extension=@TaskAction function can't be an extension function
schema.forbidden.task.action.generic=@TaskAction function can't be generic
schema.forbidden.task.action.inline=@TaskAction function can't be marked as inline
schema.forbidden.task.action.return=@TaskAction function must return Unit
schema.forbidden.task.action.suspend=Suspending @TaskAction functions are not yet supported
schema.not.interface=@Schema declaration must be an interface
schema.task.action.not.toplevel=@TaskAction function must be a top-level function
schema.task.action.parameter.not.path=@Input/@Output annotations are only applicable to Path parameters
schema.task.action.parameter.path.conflicting=Both @Input and @Output annotations can't be specified for a single parameter. \
  File updates in-place are not supported. Use separate input/output instead.
schema.type.forbidden.projection=Type projections are not allowed in @Schema interfaces
schema.type.map.key.unexpected=Only String is allowed as a Map key type in @Schema interfaces
schema.type.unexpected=Unexpected schema type `{0}`.\n\
  Supported types are:\n\
  \ - Boolean\n\
  \ - String\n\
  \ - Int\n\
  \ - java.nio.file.Path\n\
  \ - @Schema interface (must be declared in the same source directory)\n\
  \ - List<T>, Map<String, T>, where `T` is a supported type.