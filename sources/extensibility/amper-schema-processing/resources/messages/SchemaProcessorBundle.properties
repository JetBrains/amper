0.schema.message.format=[Amper Plugin Schema] {0}
schema.defaults.invalid.constant=Invalid primitive default expression. Only simple constant expressions are allowed
schema.defaults.invalid.enum=Invalid enum default expression. Only Direct enum constant access is allowed
schema.defaults.invalid.getter.block=Default property getter must have an expression body
schema.defaults.invalid.list=Invalid list default expression. Only `emptyList()` or `listOf(...)` calls are allowed
schema.defaults.invalid.map=Invalid map default expression. Only `emptyMap()` or `mapOf(...)` calls are allowed
schema.defaults.invalid.object=Explicit defaults for @Schema interfaces are not supported. Every schema interface is instantiated by default using all user-provided and default values
schema.defaults.invalid.path=Explicit defaults for paths are not yet supported
schema.defaults.redundant.null=Nullable properties are already null by default, no need to specify this explicitly
schema.forbidden.context.receivers=Context parameters are not allowed in @Schema interfaces
schema.forbidden.function=Functions are not allowed in @Schema interfaces
schema.forbidden.generics=Generics are not allowed in @Schema interfaces
schema.forbidden.local=Local @Schema interfaces are not allowed
schema.forbidden.mixins=Superinterfaces for @Schema interfaces are not yet supported
schema.forbidden.property.enabled=`enabled` property name is reserved in the plugin's schema extension
schema.forbidden.property.extension=Extension properties are not allowed in @Schema interfaces
schema.forbidden.property.mutable=Mutable properties are not allowed in @Schema interfaces
schema.forbidden.property.override=Overriding properties is not supported in @Schema interfaces
schema.forbidden.task.action.context.receivers=Context parameters are not allowed in @TaskAction function
schema.forbidden.task.action.extension=@TaskAction function can't be an extension function
schema.forbidden.task.action.generic=@TaskAction function can't be generic
schema.forbidden.task.action.inline=@TaskAction function can't be marked as inline
schema.forbidden.task.action.overloads=Illegal overload for `{0}`: @TaskAction functions can't be overloaded
schema.forbidden.task.action.return=@TaskAction function must return Unit
schema.forbidden.task.action.suspend=Suspending @TaskAction functions are not yet supported
schema.must.be.public=@Schema interface must be public
schema.not.interface=@Schema declaration must be an interface
schema.task.action.must.be.public=@TaskAction function must be public
schema.task.action.not.toplevel=@TaskAction function must be a top-level function
schema.task.action.parameter.not.path=@Input/@Output annotations are only applicable to parameters of Path-referencing types
schema.task.action.parameter.path.conflicting=Both @Input and @Output annotations can't be specified for a single parameter. \
  File updates in-place are not supported. Use separate input/output instead.
schema.task.action.parameter.path.unmarked=Parameter of a Path-referencing type must be annotated with either @Input or @Output
schema.type.forbidden.projection=Type projections are not allowed in @Schema interfaces
schema.type.map.key.unexpected=Only String is allowed as a Map key type in @Schema interfaces
schema.type.unexpected=Unexpected schema type `{0}`.\n\
  Supported types are:\n\
  \ - Boolean, String, Int, Path, enums\n\
  \ - @Schema interface (must be declared in the same source directory)\n\
  \ - List<T>, Map<String, T>, where `T` is a supported type.