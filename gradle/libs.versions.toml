[versions]
android-ddms = "25.3.0"
# The AGP is used in standalone Amper to delegate Android builds to Gradle. It can be in any version.
# The AGP used in Gradle-based Amper, on the other hand, will only work in Fleet up to a certain version.
android-forGradleBased = "8.2.0" # AUTO-UPDATED by syncVersions.main.kts - DO NOT RENAME NOR UPDATE HERE
android-forStandalone = "8.5.0"
android-tools = "31.6.1"
apache-commons = "1.24.0"
bouncycastle = "1.78.1"
clikt = "5.0.0"
compose = "1.6.10" # AUTO-UPDATED by syncVersions.main.kts - DO NOT RENAME NOR UPDATE HERE
google-services = "4.4.2"
gradle-api-forGradleBased = "8.6" # AUTO-UPDATED by syncVersions.main.kts - DO NOT RENAME NOR UPDATE HERE
gradle-api-forStandalone = "8.9"
gradle-toolingApi = "8.9"
intellij-async-profiler = "3.0-1"
intellij-parsing = "0.3.154"
intellij-platform = "233.13763.11"
intellij-xcodemodel = "241.14980"
kotlin = "2.0.20" # AUTO-UPDATED by syncVersions.main.kts - DO NOT RENAME NOR UPDATE HERE
kotlinx-coroutines = "1.8.0"
ktor = "2.3.6"
maven = "3.9.6"
maven-resolver = "1.9.15"
mordant = "3.0.0"
opentelemetry = "1.42.1"
slf4j = "2.0.16"
stacktrace-decoroutinator = "2.3.8"
tinylog = "2.6.2"
xmlutil-serialization = "0.86.2"

# Naming convention: https://blog.gradle.org/best-practices-naming-version-catalog-entries
# We follow this convention with a twist: the group part might consist of multiple segments if several groups are
# related under the same umbrella but use a different version.
# For example, we use intellij-platform-core and intellij-parsing-core as opposed to intellijPlatform-core and
# intellijParsing-core, because the intellij umbrella feels natural but they don't share the same version.
[libraries]
android-gradle-plugin-forGradleBased = { module = "com.android.tools.build:gradle", version.ref = "android-forGradleBased" }
android-gradle-plugin-forStandalone = { module = "com.android.tools.build:gradle", version.ref = "android-forStandalone" }
android-tools-common = { module = "com.android.tools:common", version.ref = "android-tools" }
android-tools-ddmlib = { module = "com.android.tools.ddms:ddmlib", version.ref = "android-ddms" }
android-tools-sdkCommon = { module = "com.android.tools:sdk-common", version.ref = "android-tools" }
android-tools-sdklib = { module = "com.android.tools:sdklib", version.ref = "android-tools" }
apacheCommons-compress = { module = "org.apache.commons:commons-compress", version.ref = "apache-commons" }
bouncycastle-bcpkix = { module = "org.bouncycastle:bcpkix-jdk18on", version.ref = "bouncycastle" }
bouncycastle-bcprov = { module = "org.bouncycastle:bcprov-jdk18on", version.ref = "bouncycastle" }
clikt = { module = "com.github.ajalt.clikt:clikt", version.ref = "clikt" }
compose-gradle-plugin = { module = "org.jetbrains.compose:compose-gradle-plugin", version.ref = "compose" }
google-services-gradle-plugin =  { module = "com.google.gms:google-services", version.ref = "google-services" }
gradle-api-forGradleBased = { module = "dev.gradleplugins:gradle-api", version.ref = "gradle-api-forGradleBased" }
gradle-api-forStandalone =  { module = "dev.gradleplugins:gradle-api", version.ref = "gradle-api-forStandalone" }
gradle-toolingApi = { module = "org.gradle:gradle-tooling-api", version.ref = "gradle-toolingApi" }
intellij-amper-xcodemodel = { module = "com.jetbrains.intellij.amper:amper-deps-proprietary-xcode-model-squashed", version.ref = "intellij-xcodemodel" }
intellij-deps-asyncProfiler = { module = "org.jetbrains.intellij.deps:async-profiler", version.ref = "intellij-async-profiler" }
intellij-parsing-core = { module = "org.jetbrains:ij-parsing-core", version.ref = "intellij-parsing" }
intellij-platform-core = { module = "com.jetbrains.intellij.platform:core", version.ref = "intellij-platform" }
intellij-platform-coreImpl = { module = "com.jetbrains.intellij.platform:core-impl", version.ref = "intellij-platform" }
intellij-platform-ideCore = { module = "com.jetbrains.intellij.platform:ide-core", version.ref = "intellij-platform" }
intellij-platform-util = { module = "com.jetbrains.intellij.platform:util", version.ref = "intellij-platform" }
intellij-platform-utilEx = { module = "com.jetbrains.intellij.platform:util-ex", version.ref = "intellij-platform" }
intellij-platform-utilJdom = { module = "com.jetbrains.intellij.platform:util-jdom", version.ref = "intellij-platform" }
kotlin-buildToolsApi = { module = "org.jetbrains.kotlin:kotlin-build-tools-api", version.ref = "kotlin" }
kotlin-compose-compiler-gradle-plugin = { module = "org.jetbrains.kotlin:compose-compiler-gradle-plugin", version.ref = "kotlin" }
kotlin-gradle-plugin = { module = "org.jetbrains.kotlin:kotlin-gradle-plugin", version.ref = "kotlin" }
kotlin-reflect = { module = "org.jetbrains.kotlin:kotlin-reflect", version.ref = "kotlin" }
kotlin-serialization-plugin = { module = "org.jetbrains.kotlin:kotlin-serialization", version.ref = "kotlin" }
kotlinx-coroutines-core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "kotlinx-coroutines" }
kotlinx-coroutines-debug = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-debug", version.ref = "kotlinx-coroutines" }
kotlinx-coroutines-slf4j = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-slf4j", version.ref = "kotlinx-coroutines" }
kotlinx-coroutines-test = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test", version.ref = "kotlinx-coroutines" }
ktor-client = { module = "io.ktor:ktor-client", version.ref = "ktor" }
ktor-client-auth = { module = "io.ktor:ktor-client-auth", version.ref = "ktor" }
ktor-client-cio = { module = "io.ktor:ktor-client-cio", version.ref = "ktor" }
ktor-client-encoding = { module = "io.ktor:ktor-client-encoding", version.ref = "ktor" }
maven-artifact = { module = "org.apache.maven:maven-artifact", version.ref = "maven" }
maven-core = { module = "org.apache.maven:maven-core", version.ref = "maven" }
maven-resolver-connectorBasic = { module = "org.apache.maven.resolver:maven-resolver-connector-basic", version.ref = "maven-resolver" }
maven-resolver-transportHttp = { module = "org.apache.maven.resolver:maven-resolver-transport-http", version.ref = "maven-resolver" }
mordant = { module = "com.github.ajalt.mordant:mordant", version.ref = "mordant" }
opentelemetry-api = { module = "io.opentelemetry:opentelemetry-api", version.ref = "opentelemetry" }
opentelemetry-kotlin = { module = "io.opentelemetry:opentelemetry-extension-kotlin", version.ref = "opentelemetry" }
opentelemetry-sdk = { module = "io.opentelemetry:opentelemetry-sdk", version.ref = "opentelemetry" }
opentelemetry-sdkTrace = { module = "io.opentelemetry:opentelemetry-sdk-trace", version.ref = "opentelemetry" }
slf4j-api = { module = "org.slf4j:slf4j-api", version.ref = "slf4j" }
stacktrace-decoroutinator = { module = "dev.reformator.stacktracedecoroutinator:stacktrace-decoroutinator-jvm", version.ref = "stacktrace-decoroutinator" }
tinylog-api = { module = "org.tinylog:tinylog-api-kotlin", version.ref = "tinylog" }
tinylog-impl = { module = "org.tinylog:tinylog-impl", version.ref = "tinylog" }
tinylog-jul = { module = "org.tinylog:jul-tinylog", version.ref = "tinylog" }
tinylog-slf4j = { module = "org.tinylog:slf4j-tinylog", version.ref = "tinylog" }
xmlutil-serialization = { module = "io.github.pdvrieze.xmlutil:serialization", version.ref = "xmlutil-serialization" }
