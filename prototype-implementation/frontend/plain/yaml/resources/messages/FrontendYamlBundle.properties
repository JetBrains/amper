no.root.found=Can''t find root file {0}.
cant.find.template=Can''t find template {0}.
cant.apply.template=Can''t apply template {0}.
wrong.element.type={0} should be {1}, got {2} instead.
wrong.element.list.type={0} should be a list of {1}s, but it also got {2} instead.
element.name.module=module.yaml
element.name.apply=Apply block
element.name.template.path=Template path
element.name.product.type=Product type
element.name.platforms.list=Platforms list
element.name.aliases=Aliases
element.name.alias.platforms=Alias platforms
element.name.variants.list=Variants list
element.name.module.layout=Module layout
element.name.repository.url=Repository URL
element.name.credentials.file=Credentials file
element.name.credentials.usernameKey=Credentials username key
element.name.credentials.passwordKey=Credentials password key
cant.merge.templates=Error while applying template ''{0}'':\n\
  Values under path ''{1}'' have different types.\n\
  Type in module: {2}.\n\
  Type in template: {3}.\n\
  Template path: {4}.
product.field.is.missing=Module should have a 'product' field.
wrong.product.field.format=Product field got a wrong format: {0}.\
  \nIt should either be a product type of platforms or an object with the following fields:\
  \nproduct:\
  \n  type: '{'Product type'}'\
  \n  platforms: '{'Platform list'}'\
  \nwhere ''Product type'' is one of {1} and ''Platform list'' is a list of platforms supported by given product type.
wrong.product.type=Unsupported product type: {0}.\
  \nIt should be one of {1}.
product.platforms.should.not.be.empty=Product platforms list should not be empty.
product.unknown.platform=Unknown platform: {0}.
product.unsupported.platform=Product type {0} does not support platform: {1}.\
  \nOnly supported platforms are: {2}.
product.type.does.not.have.default.platforms=Product type {0} should have its platforms declared explicitly like that:\
  \nproduct:\
  \n  type: {0}\
  \n  platforms: [jvm, iosArm64]
incorrect.variants.format=Incorrect variants format.\
  \nIt should either be a list of strings, e.g.:\
  \n  variants: [debug, release]\
  \nOr a list of dimensions, e.g.:\
  \n  variants:\
  \n    - [debug, release]\
  \n    - [paid, free]
applied.to.file=Error context: when applying the template at {0}
unknown.variant.option=Unknown variant option: {0}.\
  \nIt should be one of {1}.
cant.find.target.with.platforms.and.options=Can''t find a variant with platforms {0} and variant options {1}.
cant.parse.dependency=Error while parsing dependency for fragment {0}:\
  \n{1}\
  \nis an unsupported notation.
field.must.be.present={0} must be present (field: ''{1}'').
credentials.file.does.not.exist=Credentials file {0} does not exist.
credentials.file.does.not.have.user.key=Credentials file {0} does not have a user key ''{1}''.
credentials.file.does.not.have.password.key=Credentials file {0} does not have a password key ''{1}''.
wrong.repository.format=Wrong repository format.
cant.find.module=Can''t find module {0}.
wrong.kotlin.serialization.notation=Wrong kotlin serialization notation. \
  \nShould be "serialization: <format>" or \
  \n"serialization:\
  \n   format: <format>"
wrong.kotlin.serialization.format=Wrong kotlin serialization format. Should be "none" or "json".
wrong.enum.type=Wrong enumeration value. Should be one of: [{0}]
no.catalog.value=No catalog value for key: {0}